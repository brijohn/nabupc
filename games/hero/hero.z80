;
; H.E.R.O Copyright Activision 1982,1984
;   NABU Conversion by Brian Johnson 2023
;
;

VDP_LATCH:    equ 0xa1
VDP_DATA:     equ 0xa0

PSG_LATCH:    equ 0x41
PSG_WRITE:    equ 0x40
PSG_READ:     equ 0x40

MSX_INIT:     equ 0x4002

VBLANK_FLAG:  equ 0xe347

CPM:          equ 0

if CPM
org 0x0100
else
org 0x140d
endif

	nop
	nop
	nop
	jp     entry

; SHA1: a1e14912d45944b9a6baef1d4d3a04c1ae8df923
msxcode:   incbin "hero.rom"
msxlength: equ $-msxcode

; ---------------------------------------------
;     MSX Wrapper Entry Point
; ---------------------------------------------

entry:
	di
	ld     sp, 0xE000          ; Set temporary stack to high 8k of RAM
	ld     a, 0x03
	out    (0x00), a           ; Disable ROM

	ld     hl, msxcode         ; Copy ROM code to bottom 32k of RAM
	ld     de, 0x0000
	ld     bc, msxlength
	ldir

	call   splash
	call   patch               ; Patch ROM I/O accesses

	ld     a, 0xA0             ; Interrupt vector at address 0xA000
	ld     i, a
	im     2                   ; Interrupt Mode 2

	ld     a, 0x07             ; I/O Port configuration register
	out    (0x41), a
	ld     a, 0x7F             ; Port A write, Port B read
	out    (0x40), a
	ld     a, 0x0E             ; I/O Port A register
	out    (0x41), a
	ld     a, 0x30             ; Enable VBlank and keyboard interrupt
	out    (0x40), a

	ld     hl, (MSX_INIT)
	jp     (hl)                ; Jump to MSX ROM entry point

; ---------------------------------------------
;     ROM Patcher
; ---------------------------------------------
patch:
	ld     ix, patch_table     ; Address of patch table
	ld     de, 0x4000          ; ROM is 16k mirrored at the 0x4000 offset
apply_patch:
	ld     l, (ix+0)
	ld     h, (ix+1)           ; Load first word in table (address to patch)
	ld     a, h
	or     l
	jr     z, patch_done       ; If address == 0 we are done
	inc    ix
	inc    ix                  ; Increment pointer to length byte for entry
	ld     b, (ix+0)           ; B = number of bytes to patch
patch_byte:
	inc    ix                  ; IX = address of first patch byte in current entry
	ld     a, (ix+0)           ; A = new value
	ld     (hl), a             ; Update ROM with new byte value
	push   hl
	add    hl, de              ; Add 0x4000 to current address and
	ld     (hl), a             ; patch it as well
	pop    hl                  ; Restore HL
	inc    hl                  ; Increment patch address
	djnz   patch_byte          ; Decrement B if not zero patch next byte in entry
	inc    ix                  ; Move to next entry in patch table
	jr     apply_patch         ; Apply next patch to ROM
patch_done:
	ret

; ---------------------------------------------
;     Table of patches to apply to ROM
;        Entry format
;         0  - Address to patch
;         2  - Number of bytes
;         3+ - List of bytes
;     The last entry will have an address of 0
; ---------------------------------------------

patch_table:
; Set PSG IO Ports correctly
	dw     0x00db
	db     1, PSG_LATCH
	dw     0x00dd
	db     1, 0x5c
	dw     0x00df
	db     1, PSG_WRITE

; Use IM 2
	dw     0x0045
	db     1, 0x5e

; Patch Functions
	dw     0x913
	db     3, 0xc3
	dw     VDP_GetStatus

	dw     0x916
	db     3, 0xc3
	dw     VDP_SetRegister

	dw     0x91f
	db     3, 0xc3
	dw     VDP_FillVRAM

	dw     0x931
	db     3, 0xc3
	dw     VDP_WriteVRAM

	dw     0xb9e
	db     3, 0xc3
	dw     PSG_SetNoiseFreq

	dw     0xba8
	db     3, 0xc3
	dw     PSG_SetFreq

	dw     0xbbc
	db     3, 0xc3
	dw     PSG_SetVolume

	dw     0x6df
	db     3, 0xcd
	dw     Read_Joystick

	dw     0x6b5
	db     3, 0xcd
	dw     Read_Keyboard

	dw     0x699
	db     3, 0xcd
	dw     Get_PauseAndReset

	dw     0x682
	db     3, 0xcd
	dw     Get_LevelSelect

	dw     0x685
	db     3, 0xda
	dw     0x699

	dw     0x688
	db     3, 0xc3
	dw     0x694

; Patch ROM functions

; End of patch table
	dw 0
	db 0

; ---------------------------------------------
; Splash Screen
; ---------------------------------------------
splash:
	ld     b, 0x00
	ld     c, 0x00
	call   VDP_SetRegister
	ld     b, 0x01
	ld     c, 0xC0
	call   VDP_SetRegister               ; Graphics Mode I
	ld     b, 0x02
	ld     c, 0x00
	call   VDP_SetRegister               ; Name Table Address 0x0000
	ld     b, 0x03
	ld     c, 0x30
	call   VDP_SetRegister               ; Color Table Address 0x0C00
	ld     b, 0x04
	ld     c, 0x02
	call   VDP_SetRegister               ; Pattern Generator Address 0x1000
	ld     b, 0x05
	ld     c, 0x1a
	call   VDP_SetRegister               ; Sprite Attribute Table Address 0x0D00
	ld     b, 0x06
	ld     c, 0x07
	call   VDP_SetRegister               ; Sprite Pattern Generator Address 0x3800
	ld     b, 0x07
	ld     c, 0xF1
	call   VDP_SetRegister
	ld     a, 0xd0
	ld     de, 0x0001
	ld     hl, 0x0d00
	call   VDP_FillVRAM                  ; Disable sprites
	ld     a, 0x61
	ld     de, 0x0020
	ld     hl, 0x0c00
	call   VDP_FillVRAM                  ; Red foreground black background
	ld     a, 0x20
	ld     de, 0x0300
	ld     hl, 0x0000
	call   VDP_FillVRAM                  ; Fill screen with spaces
	ld     bc, 0x0800
	ld     de, 0x1000
	ld     hl, msx_font
	call   VDP_WriteVRAM                 ; Load ROM's pattern generator for font
	ld     bc, 0x001b
	ld     de, 0x0182
	ld     hl,splash_msg
	call   VDP_WriteVRAM                 ; Display splash screen message
	xor    a
	ld     b, 0x08
	ld     d, a
	ld     e, a
delay_loop:                              ; Delay
	dec    de
	ld     a, d
	or     e
	jr     nz, delay_loop
	djnz   delay_loop
	ret

splash_msg: db "Conversion by Brian Johnson"

; ---------------------------------------------
;     Stub IRQ Handler
; ---------------------------------------------
nullirq:
	reti

; ---------------------------------------------
;     Keyboard IRQ Handler
; ---------------------------------------------
kbirq:
	push   af
	push   hl
	ld     a, (joystick)
	cp     0x80
	jr     z, joystick1_handler ; If the last byte received was 0x80 handle joystick 1 input
	cp     0x81
	jr     z, joystick2_handler ; If the last byte received was 0x81 handle joystick 2 input
	xor    a
	ld     (joystick), a       ; Clear joystick flag
	in     a, (0x90)
	cp     0x94
	jr     z, kbirq_exit       ; If byte received was 0x94 (watchdog) simply exit
	cp     0x0D
	jr     z, go_pressed       ; The GO(Enter) key was preseed
	cp     0x1b
	jr     z, esc_pressed      ; Esc was pressed
	cp     0x20
	jr     z, fire_pressed     ; Spacebar (FIRE) was pressed
	cp     0xE9
	jr     z, pause_pressed    ; PAUSE key was pressed
	cp     0xF9
	jr     z, pause_released   ; PAUSE key was released
	cp     0x31
	jr     c, kbirq_exit
	cp     0x39
	jr     c, level_select     ; A number between 1 and 8 was pressed
	cp     0x80
	jr     c, kbirq_exit
	cp     0x82
	jr     c, joystick_select  ; A joystick command byte (0x80-0x81) was seen
	cp     0xE0
	jr     c, kbirq_exit
	cp     0xE4
	call   c, arrow_handler    ; A make code for the arrow keys was seen
	cp     0xF0
	jr     c, kbirq_exit
	cp     0xF4
	call   c, arrow_handler    ; A break code for the arrows was seen
	jr     kbirq_exit
joystick_select:
	ld     (joystick), a       ; Update joystick flag with byte received
	jr     kbirq_exit
pause_pressed:
	ld     hl, pause           ; Store PAUSE key
	jr     store_key
pause_released:
	xor    a
	ld     hl, pause           ; Clear PAUSE key
	ld     (hl), a
	jr     kbirq_exit
esc_pressed:
	ld     hl, escape          ; Store Escape
	jr     store_key
go_pressed:
	ld     hl, enter           ; Store GO key
store_key:
	ld     (hl), a             ; Stores scancode for later
	jr     kbirq_exit
level_select:
	sub    0x30                ; Turn scancode into digit between 1 and 8
	ld     (level), a          ; and store it as the selected level
	jr     kbirq_exit
fire_pressed:
	ld     hl, key_state       ; HL = address of keyboard control state
	set    0, (hl)             ; Set the FIRE bit in the control state for the keyboard
	ld     a, 1
	ld     (fire_delay), a     ; Delay counter till FIRE key gets released
	jr     kbirq_exit
joystick1_handler:
	ld     hl, joy1_state      ; HL = address of joystick 1 state
	jp     joystick_handler
joystick2_handler:
	ld     hl, joy2_state      ; HL = address of joystick 2 state
joystick_handler:
	xor    a
	ld     (joystick), a       ; Clear joystick flag
	in     a, (0x90)           ; Read joystick input
	and    0x1f
	ld     (hl), a             ; save joystick state
kbirq_exit:
	pop    hl
	pop    af
	ei
	reti

joystick:  db 0
enter:     db 0
pause:     db 0
escape:    db 0
level:     db 0
joy1_state:db 0
joy2_state:db 0
key_state: db 0
fire_delay:db 0

; ---------------------------------------------
; Arrow Key Handler
;
; This function takes the make/break arrow key
; scancodes and converts them into a bit array
; in the folllowing format:.
;   (R D U L - - - -)
; ---------------------------------------------
arrow_handler:
	ld     hl, key_state
	and    0x13
	cp     0x00
	jr     nz, mklt
	set    7, (hl)
mklt:
	cp     0x01
	jr     nz, mkup
	set    4, (hl)
mkup:
	cp     0x02
	jr     nz, mkdn
	set    5, (hl)
mkdn:
	cp     0x03
	jr     nz, bkrt
	set    6, (hl)
bkrt:
	cp     0x10
	jr     nz, bklt
	res    7, (hl)
bklt:
	cp     0x11
	jr     nz, bkup
	res    4, (hl)
bkup:
	cp     0x12
	jr     nz, bkdn
	res    5, (hl)
bkdn:
	cp     0x13
	ret    nz
	res    6, (hl)
	ret

; ---------------------------------------------
;     Vertical Blank Interrupt
; ---------------------------------------------
vbirq:
	push   af
	push   hl
	ld     a, (fire_delay)
	cp     0
	jr     z, vb_done          ; If fire_delay is 0 return from interrupt
	inc    a                   ; Increment fire_delay
	and    0x0f                ; fire_delay mod 15
	ld     (fire_delay), a     ; Update fire_delay
	cp     0
	jr     nz, vb_done         ; If fire_delay has not wrapped back to 0 exit interrupt
	ld     hl, key_state
	res    0, (hl)             ; Else reset keyboard fire button state
vb_done:
	pop    hl
	pop    af
	jp     0x3f4



; ----------------------------------------------------------
; Get VDP Status
;   uint8_t VDP_GetStatus(void)
;       return : A
; ----------------------------------------------------------
VDP_GetStatus:
	in     a, (VDP_LATCH)
	ret

; ----------------------------------------------------------
; Set VDP Registser
;   void VDP_SetRegister(uint8_t register, unit8_t value)
;       register : B
;       value    : C
; ----------------------------------------------------------
VDP_SetRegister:
	ld     a, c
	out    (VDP_LATCH), a
	ld     a, b
	or     0x80
	out    (VDP_LATCH), a
	ret

; ---------------------------------------------------------
; Fill VRAM with a set value
;   void VDP_FillVRAM(uint8_t value, uint16_t address, uint16_t count)
;       value   : A
;       address : HL
;       count   : DE
; ---------------------------------------------------------
VDP_FillVRAM:
	ld     b, a
	ld     a, l
	out    (VDP_LATCH), a
	ld     a, h
	or     0x40
	out    (VDP_LATCH), a
VDP_FillVRAM.1:
	ld     a, b
	out    (VDP_DATA), a
	nop
	dec    de
	ld     a, e
	or     d
	jr     nz, VDP_FillVRAM.1
	ret

; ---------------------------------------------------------
; Write Data to VRAM
;   void VDP_WriteVRAM(uint16_t address, uint16_t vram, uint16_t count)
;       address : HL
;       vram    : DE
;       count   : BC
; ---------------------------------------------------------
VDP_WriteVRAM:
	ld     a, e
	out    (VDP_LATCH), a
	ld     a, d
	or     0x40
	out    (VDP_LATCH), a
	ld     e, b
	ld     b, c
	ld     c, VDP_DATA
VDP_WriteVRAM.1:
	outi
	jr     nz, VDP_WriteVRAM.1
	dec    e
	jp     p, VDP_WriteVRAM.1
	ret

PSG_SetNoiseFreq:
	push   af
	ld     a, 0x06
	out    (PSG_LATCH), a
	ld     a, d
	out    (PSG_WRITE), a
	pop    af
	ret

PSG_SetFreq:
	push   af
	push   bc
	sla    c
	ld     a, c
	out    (PSG_LATCH), a
	ld     a, l
	out    (PSG_WRITE), a
	inc    c
	ld     a, c
	out    (PSG_LATCH), a
	ld     a, h
	out    (PSG_WRITE), a
	pop    bc
	pop    af
	ret

PSG_SetVolume:
	push   af
	ld     a, 0x08
	add    a, c
	out    (PSG_LATCH), a
	ld     a, e
	cpl
	and    0x0f
	out    (PSG_WRITE), a
	pop    af
	ret

Get_PauseAndReset:
	pop    hl
	ld     hl, 0x06ad   ; Return Address
	push   hl
	ld     a, (escape)
	cp     0
	jr     z, check_pause
	xor    a
	ld     (escape), a
	ld     c, 0xb
	ret
check_pause:
	ld     a, (pause)
	cp     0
	ret    z
	ld     c, 0x0a
	ret

Get_LevelSelect:
	ld     c, 7
	ld     a, (level)
	or     a
	ret    z
	ld     c, a
	cp     7
	push   af
	xor    a
	ld     (level), a
	pop    af
	ret

Read_Keyboard:
	pop    hl
	ld     hl, 0x06bc   ; Return Address
	push   hl
	ld     a, (key_state)
	ret

Read_Joystick:
	pop    hl
	ld     hl, 0x06ed   ; Return Address
	push   hl
	ld     a, (joy1_state)
	ld     c, a
	and    0x12
	bit    0, c
	jr     nz, joystick.left
	bit    2, c
	jr     nz, joystick.right
	bit    3, c
	jr     nz, joystick.up
	jr     joystick.set
joystick.right:
	set    3, a
	jr     joystick.set
joystick.up:
	set    0, a
	jr     joystick.set
joystick.left:
	set    2, a
joystick.set:
	ret

; ---------------------------------------------
;     Font Data
; ---------------------------------------------

msx_font:
	db     0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00         ; 0
	db     0x3C,0x42,0xA5,0xA5,0xC3,0xBD,0x42,0x3C         ; 1
	db     0x3C,0x7E,0xDB,0xDB,0xBD,0xC3,0x7E,0x3C         ; 2
	db     0x6C,0xAA,0x92,0x44,0x44,0x28,0x10,0x00         ; 3
	db     0x10,0x28,0x44,0x82,0x44,0x28,0x10,0x00         ; 4
	db     0x10,0x38,0x38,0xD6,0xFE,0xD6,0x38,0x00         ; 5
	db     0x10,0x38,0x7C,0x7C,0xFE,0xD6,0x38,0x00         ; 6
	db     0x00,0x00,0x00,0x18,0x18,0x00,0x00,0x00         ; 7
	db     0xFF,0xFF,0xFF,0xE7,0xE7,0xFF,0xFF,0xFF         ; 8
	db     0x3C,0x42,0x81,0x81,0x81,0x81,0x42,0x3C         ; 9
	db     0xC3,0xBD,0x7E,0x7E,0x7E,0x7E,0xBD,0xC3         ; 10
	db     0x0C,0x04,0x08,0x70,0x88,0x88,0x70,0x00         ; 11
	db     0x00,0x70,0x88,0x88,0x70,0x20,0x70,0x20         ; 12
	db     0x20,0x30,0x28,0x28,0x20,0xE0,0xC0,0x00         ; 13
	db     0x38,0x3C,0x24,0x24,0xE4,0xDC,0x18,0x00         ; 14
	db     0x10,0x44,0x38,0xAA,0x38,0x44,0x10,0x00         ; 15
	db     0x10,0x10,0x10,0x38,0x10,0x10,0x10,0x10         ; 16
	db     0x10,0x10,0x10,0xEF,0x00,0x00,0x00,0x00         ; 17
	db     0x00,0x00,0x00,0xEF,0x10,0x10,0x10,0x10         ; 18
	db     0x10,0x10,0x10,0xE0,0x10,0x10,0x10,0x10         ; 19
	db     0x10,0x10,0x10,0x0F,0x10,0x10,0x10,0x10         ; 20
	db     0x10,0x10,0x10,0xEF,0x10,0x10,0x10,0x10         ; 21
	db     0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10         ; 22
	db     0x00,0x00,0x00,0xFF,0x00,0x00,0x00,0x00         ; 23
	db     0x00,0x00,0x00,0x0F,0x10,0x10,0x10,0x10         ; 24
	db     0x00,0x00,0x00,0xE0,0x10,0x10,0x10,0x10         ; 25
	db     0x10,0x10,0x10,0x0F,0x00,0x00,0x00,0x00         ; 26
	db     0x10,0x10,0x10,0xE0,0x00,0x00,0x00,0x00         ; 27
	db     0x81,0x42,0x24,0x18,0x18,0x24,0x42,0x81         ; 28
	db     0x01,0x02,0x04,0x08,0x10,0x20,0x40,0x80         ; 29
	db     0x80,0x40,0x20,0x10,0x08,0x04,0x02,0x01         ; 30
	db     0x00,0x00,0x10,0xFF,0x10,0x00,0x00,0x00         ; 31
	db     0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00         ; 32
	db     0x20,0x20,0x20,0x20,0x00,0x20,0x00,0x00         ; 33
	db     0x50,0x50,0x00,0x00,0x00,0x00,0x00,0x00         ; 34
	db     0x00,0x50,0xF8,0x50,0xF8,0x50,0x00,0x00         ; 35
	db     0x20,0x70,0xA0,0x70,0x28,0x70,0x20,0x00         ; 36
	db     0x00,0xC8,0xD0,0x20,0x58,0x98,0x00,0x00         ; 37
	db     0x60,0x90,0x60,0xA8,0x98,0x60,0x00,0x00         ; 38
	db     0x40,0x40,0x00,0x00,0x00,0x00,0x00,0x00         ; 39
	db     0x20,0x40,0x40,0x40,0x40,0x20,0x00,0x00         ; 40
	db     0x20,0x10,0x10,0x10,0x10,0x20,0x00,0x00         ; 41
	db     0x00,0x20,0xA8,0x70,0x50,0x88,0x00,0x00         ; 42
	db     0x00,0x20,0x20,0xF8,0x20,0x20,0x00,0x00         ; 43
	db     0x00,0x00,0x00,0x00,0x00,0x40,0x40,0x00         ; 44
	db     0x00,0x00,0x00,0xF8,0x00,0x00,0x00,0x00         ; 45
	db     0x00,0x00,0x00,0x00,0x00,0x40,0x00,0x00         ; 46
	db     0x00,0x08,0x10,0x20,0x40,0x80,0x00,0x00         ; 47
	db     0x70,0x88,0xA8,0xA8,0x88,0x70,0x00,0x00         ; 48
	db     0x20,0x60,0x20,0x20,0x20,0x70,0x00,0x00         ; 49
	db     0x70,0x88,0x08,0x70,0x80,0xF8,0x00,0x00         ; 50
	db     0xF8,0x08,0x30,0x08,0x88,0x70,0x00,0x00         ; 51
	db     0x10,0x30,0x50,0xF8,0x10,0x10,0x00,0x00         ; 52
	db     0xF8,0x80,0x70,0x08,0x88,0x70,0x00,0x00         ; 53
	db     0x30,0x40,0x70,0x88,0x88,0x70,0x00,0x00         ; 54
	db     0xF8,0x88,0x10,0x20,0x20,0x20,0x00,0x00         ; 55
	db     0x70,0x88,0x70,0x88,0x88,0x70,0x00,0x00         ; 56
	db     0x70,0x88,0x88,0x78,0x08,0x70,0x00,0x00         ; 57
	db     0x00,0x00,0x40,0x00,0x00,0x40,0x00,0x00         ; 58
	db     0x00,0x00,0x40,0x00,0x00,0x40,0x40,0x00         ; 59
	db     0x00,0x18,0x60,0x80,0x60,0x18,0x00,0x00         ; 60
	db     0x00,0x00,0xF8,0x00,0xF8,0x00,0x00,0x00         ; 61
	db     0x00,0xC0,0x30,0x08,0x30,0xC0,0x00,0x00         ; 62
	db     0x70,0x88,0x30,0x20,0x00,0x20,0x00,0x00         ; 63
	db     0x70,0x88,0x98,0xA8,0xA8,0x98,0x40,0x00         ; 64
	db     0x70,0x88,0x88,0xF8,0x88,0x88,0x00,0x00         ; 65
	db     0xE0,0x90,0xE0,0x90,0x88,0xF0,0x00,0x00         ; 66
	db     0x70,0x88,0x80,0x80,0x88,0x70,0x00,0x00         ; 67
	db     0xF0,0x48,0x48,0x48,0x48,0xF0,0x00,0x00         ; 68
	db     0xF8,0x80,0xE0,0x80,0x80,0xF8,0x00,0x00         ; 69
	db     0xF8,0x80,0x80,0xE0,0x80,0x80,0x00,0x00         ; 70
	db     0x70,0x88,0x80,0xB8,0x88,0x70,0x00,0x00         ; 71
	db     0x88,0x88,0xF8,0x88,0x88,0x88,0x00,0x00         ; 72
	db     0x70,0x20,0x20,0x20,0x20,0x70,0x00,0x00         ; 73
	db     0x38,0x08,0x08,0x08,0x88,0x70,0x00,0x00         ; 74
	db     0x88,0x90,0xA0,0xE0,0x90,0x88,0x00,0x00         ; 75
	db     0x80,0x80,0x80,0x80,0x80,0xF8,0x00,0x00         ; 76
	db     0xD8,0xA8,0xA8,0x88,0x88,0x88,0x00,0x00         ; 77
	db     0xC8,0xA8,0xA8,0x98,0x98,0x88,0x00,0x00         ; 78
	db     0x70,0x88,0x88,0x88,0x88,0x70,0x00,0x00         ; 79
	db     0xF0,0x88,0x88,0xF0,0x80,0x80,0x00,0x00         ; 80
	db     0x70,0x88,0x88,0xA8,0x90,0x68,0x00,0x00         ; 81
	db     0xF0,0x88,0x88,0xF0,0xA0,0x98,0x00,0x00         ; 82
	db     0x70,0x80,0x70,0x08,0x08,0xF0,0x00,0x00         ; 83
	db     0xF8,0x20,0x20,0x20,0x20,0x20,0x00,0x00         ; 84
	db     0x88,0x88,0x88,0x88,0x88,0x78,0x00,0x00         ; 85
	db     0x88,0x88,0x88,0x50,0x50,0x20,0x00,0x00         ; 86
	db     0x88,0x88,0xA8,0xA8,0xA8,0xD8,0x00,0x00         ; 87
	db     0x88,0x50,0x20,0x50,0x88,0x88,0x00,0x00         ; 88
	db     0x88,0x88,0x70,0x20,0x20,0x20,0x00,0x00         ; 89
	db     0xF8,0x10,0x20,0x40,0x80,0xF8,0x00,0x00         ; 90
	db     0x70,0x40,0x40,0x40,0x40,0x70,0x00,0x00         ; 91
	db     0x00,0x80,0x40,0x20,0x10,0x08,0x00,0x00         ; 92
	db     0x70,0x10,0x10,0x10,0x10,0x70,0x00,0x00         ; 93
	db     0x40,0xA0,0x00,0x00,0x00,0x00,0x00,0x00         ; 94
	db     0x00,0x00,0x00,0x00,0x00,0x00,0xF8,0x00         ; 95
	db     0x20,0x10,0x00,0x00,0x00,0x00,0x00,0x00         ; 96
	db     0x00,0x00,0x78,0x88,0x98,0x68,0x00,0x00         ; 97
	db     0x80,0x80,0xF0,0x88,0x88,0xF0,0x00,0x00         ; 98
	db     0x00,0x00,0x78,0x80,0x80,0x78,0x00,0x00         ; 99
	db     0x08,0x08,0x78,0x88,0x88,0x78,0x00,0x00         ; 100
	db     0x00,0x00,0x70,0x98,0xE0,0x78,0x00,0x00         ; 101
	db     0x30,0x48,0x40,0x40,0xE0,0x40,0x40,0x40         ; 102
	db     0x00,0x00,0x78,0x88,0x88,0x78,0x08,0x70         ; 103
	db     0x80,0x80,0xF0,0x88,0x88,0x88,0x00,0x00         ; 104
	db     0x20,0x00,0x60,0x20,0x20,0x70,0x00,0x00         ; 105
	db     0x10,0x00,0x30,0x10,0x10,0x10,0x10,0x60         ; 106
	db     0x80,0x80,0x98,0xA0,0xE0,0x98,0x00,0x00         ; 107
	db     0xC0,0x40,0x40,0x40,0x40,0x70,0x00,0x00         ; 108
	db     0x00,0x00,0xF0,0xA8,0xA8,0xA8,0x00,0x00         ; 109
	db     0x00,0x00,0xF0,0x88,0x88,0x88,0x00,0x00         ; 110
	db     0x00,0x00,0x70,0x88,0x88,0x70,0x00,0x00         ; 111
	db     0x00,0x00,0xF0,0x88,0x88,0xF0,0x80,0x80         ; 112
	db     0x00,0x00,0x78,0x88,0x88,0x78,0x08,0x08         ; 113
	db     0x00,0x00,0xB8,0xC0,0x80,0x80,0x00,0x00         ; 114
	db     0x00,0x00,0x78,0xF0,0x08,0xF0,0x00,0x00         ; 115
	db     0x40,0x40,0xF0,0x40,0x48,0x30,0x00,0x00         ; 116
	db     0x00,0x00,0x88,0x88,0x88,0x78,0x00,0x00         ; 117
	db     0x00,0x00,0x88,0x88,0x50,0x20,0x00,0x00         ; 118
	db     0x00,0x00,0x88,0xA8,0xA8,0xD8,0x00,0x00         ; 119
	db     0x00,0x00,0xC8,0x30,0x60,0x98,0x00,0x00         ; 120
	db     0x00,0x00,0x88,0x88,0x88,0x78,0x08,0x70         ; 121
	db     0x00,0x00,0xF8,0x30,0x40,0xF8,0x00,0x00         ; 122
	db     0x10,0x20,0x20,0x40,0x20,0x20,0x10,0x00         ; 123
	db     0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x00         ; 124
	db     0x40,0x20,0x20,0x10,0x20,0x20,0x40,0x00         ; 125
	db     0x50,0xA0,0x00,0x00,0x00,0x00,0x00,0x00         ; 126
	db     0x00,0x20,0x50,0x50,0xF8,0x00,0x00,0x00         ; 127
	db     0x70,0x88,0x80,0x80,0x88,0x70,0x20,0x40         ; 128
	db     0x50,0x00,0x88,0x88,0x88,0x78,0x00,0x00         ; 129
	db     0x08,0x10,0x70,0x98,0xE0,0x78,0x00,0x00         ; 130
	db     0x20,0x50,0x78,0x88,0x98,0x68,0x00,0x00         ; 131
	db     0x50,0x00,0x78,0x88,0x98,0x68,0x00,0x00         ; 132
	db     0x40,0x20,0x78,0x88,0x98,0x68,0x00,0x00         ; 133
	db     0x20,0x00,0x78,0x88,0x98,0x68,0x00,0x00         ; 134
	db     0x00,0x00,0x78,0x80,0x80,0x78,0x20,0x40         ; 135
	db     0x20,0x50,0x70,0x98,0xE0,0x78,0x00,0x00         ; 136
	db     0x50,0x00,0x70,0x98,0xE0,0x78,0x00,0x00         ; 137
	db     0x40,0x20,0x70,0x98,0xE0,0x78,0x00,0x00         ; 138
	db     0x50,0x00,0x60,0x20,0x20,0x70,0x00,0x00         ; 139
	db     0x20,0x50,0x60,0x20,0x20,0x70,0x00,0x00         ; 140
	db     0x40,0x20,0x60,0x20,0x20,0x70,0x00,0x00         ; 141
	db     0x50,0x70,0x88,0x88,0xF8,0x88,0x00,0x00         ; 142
	db     0x20,0x70,0x88,0x88,0xF8,0x88,0x00,0x00         ; 143
	db     0x18,0xF8,0x80,0xE0,0x80,0xF8,0x00,0x00         ; 144
	db     0x00,0x00,0xD0,0x68,0xB0,0xD8,0x00,0x00         ; 145
	db     0x78,0xA0,0xB0,0xE0,0xA0,0xB8,0x00,0x00         ; 146
	db     0x20,0x50,0x70,0x88,0x88,0x70,0x00,0x00         ; 147
	db     0x50,0x00,0x70,0x88,0x88,0x70,0x00,0x00         ; 148
	db     0x40,0x20,0x70,0x88,0x88,0x70,0x00,0x00         ; 149
	db     0x20,0x50,0x88,0x88,0x88,0x78,0x00,0x00         ; 150
	db     0x40,0x20,0x88,0x88,0x88,0x78,0x00,0x00         ; 151
	db     0x50,0x00,0x88,0x88,0x88,0x78,0x08,0x70         ; 152
	db     0x50,0x70,0x88,0x88,0x88,0x70,0x00,0x00         ; 153
	db     0x50,0x88,0x88,0x88,0x88,0x70,0x00,0x00         ; 154
	db     0x20,0x20,0x78,0x80,0x80,0x78,0x20,0x20         ; 155
	db     0x20,0x50,0x40,0xE0,0x40,0x48,0xB0,0x00         ; 156
	db     0x88,0x88,0x50,0xF8,0x20,0x70,0x20,0x00         ; 157
	db     0x80,0xD0,0xB0,0xB0,0xB8,0xD0,0x88,0x80         ; 158
	db     0x38,0x40,0xF0,0x40,0xF0,0x40,0x38,0x00         ; 159
	db     0x08,0x10,0x78,0x88,0x98,0x68,0x00,0x00         ; 160
	db     0x10,0x20,0x60,0x20,0x20,0x70,0x00,0x00         ; 161
	db     0x10,0x20,0x70,0x88,0x88,0x70,0x00,0x00         ; 162
	db     0x10,0x20,0x88,0x88,0x88,0x78,0x00,0x00         ; 163
	db     0x28,0x50,0xF0,0x88,0x88,0x88,0x00,0x00         ; 164
	db     0x28,0xD0,0xA8,0xA8,0x98,0x88,0x00,0x00         ; 165
	db     0x00,0x00,0x78,0x88,0x98,0x68,0x00,0x70         ; 166
	db     0x00,0x00,0x70,0x88,0x88,0x70,0x00,0x70         ; 167
	db     0x20,0x00,0x20,0x60,0x88,0x70,0x00,0x00         ; 168
	db     0x00,0x00,0x00,0xE0,0x80,0x00,0x00,0x00         ; 169
	db     0x00,0x00,0x00,0xE0,0x20,0x00,0x00,0x00         ; 170
	db     0x40,0x48,0x50,0x30,0x48,0x90,0x38,0x00         ; 171
	db     0x40,0x48,0x50,0x28,0x58,0xB8,0x08,0x00         ; 172
	db     0x20,0x00,0x20,0x20,0x20,0x20,0x00,0x00         ; 173
	db     0x00,0x00,0x00,0x48,0x90,0x48,0x00,0x00         ; 174
	db     0x00,0x00,0x00,0x90,0x48,0x90,0x00,0x00         ; 175
	db     0x28,0x50,0x70,0x88,0xF8,0x88,0x00,0x00         ; 176
	db     0x28,0x50,0x78,0x88,0x98,0x68,0x00,0x00         ; 177
	db     0x28,0x50,0x70,0x20,0x20,0x70,0x00,0x00         ; 178
	db     0x28,0x50,0x60,0x20,0x20,0x70,0x00,0x00         ; 179
	db     0x28,0x70,0x88,0x88,0x88,0x70,0x00,0x00         ; 180
	db     0x28,0x50,0x70,0x88,0x88,0x70,0x00,0x00         ; 181
	db     0x28,0x50,0x88,0x88,0x88,0x78,0x00,0x00         ; 182
	db     0x28,0x50,0x00,0x88,0x88,0x78,0x00,0x00         ; 183
	db     0xFC,0x48,0x48,0x48,0x48,0xE8,0x08,0x30         ; 184
	db     0x48,0x00,0xD8,0x48,0x48,0xE8,0x08,0x30         ; 185
	db     0xE0,0x68,0x30,0xE8,0x58,0xB8,0x08,0x00         ; 186
	db     0x50,0x28,0x00,0x00,0x00,0x00,0x00,0x00         ; 187
	db     0x00,0x20,0x50,0x88,0x50,0x20,0x00,0x00         ; 188
	db     0x00,0x48,0x50,0x20,0x68,0xA8,0x00,0x00         ; 189
	db     0x7C,0xA8,0xA8,0xA8,0x68,0x28,0x28,0x44         ; 190
	db     0x70,0x80,0x70,0x88,0x70,0x08,0x88,0x70         ; 191
	db     0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0xFF         ; 192
	db     0xF0,0xF0,0xF0,0xF0,0x0F,0x0F,0x0F,0x0F         ; 193
	db     0x00,0x00,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF         ; 194
	db     0xFF,0xFF,0x00,0x00,0x00,0x00,0x00,0x00         ; 195
	db     0x00,0x00,0x00,0x3C,0x3C,0x00,0x00,0x00         ; 196
	db     0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x00,0x00         ; 197
	db     0xC0,0xC0,0xC0,0xC0,0xC0,0xC0,0xC0,0xC0         ; 198
	db     0x0F,0x0F,0x0F,0x0F,0xF0,0xF0,0xF0,0xF0         ; 199
	db     0xFC,0xFC,0xFC,0xFC,0xFC,0xFC,0xFC,0xFC         ; 200
	db     0x03,0x03,0x03,0x03,0x03,0x03,0x03,0x03         ; 201
	db     0x3F,0x3F,0x3F,0x3F,0x3F,0x3F,0x3F,0x3F         ; 202
	db     0x11,0x22,0x44,0x88,0x11,0x22,0x44,0x88         ; 203
	db     0x88,0x44,0x22,0x11,0x88,0x44,0x22,0x11         ; 204
	db     0xFE,0x7C,0x38,0x10,0x00,0x00,0x00,0x00         ; 205
	db     0x00,0x00,0x00,0x00,0x10,0x38,0x7C,0xFE         ; 206
	db     0x80,0xC0,0xE0,0xF0,0xE0,0xC0,0x80,0x00         ; 207
	db     0x01,0x03,0x07,0x0F,0x07,0x03,0x01,0x00         ; 208
	db     0xFF,0x7E,0x3C,0x18,0x18,0x3C,0x7E,0xFF         ; 209
	db     0x81,0xC3,0xE7,0xFF,0xFF,0xE7,0xC3,0x81         ; 210
	db     0xF0,0xF0,0xF0,0xF0,0x00,0x00,0x00,0x00         ; 211
	db     0x00,0x00,0x00,0x00,0x0F,0x0F,0x0F,0x0F         ; 212
	db     0x0F,0x0F,0x0F,0x0F,0x00,0x00,0x00,0x00         ; 213
	db     0x00,0x00,0x00,0x00,0xF0,0xF0,0xF0,0xF0         ; 214
	db     0x33,0x33,0xCC,0xCC,0x33,0x33,0xCC,0xCC         ; 215
	db     0x00,0x10,0x28,0x28,0x7C,0x00,0x00,0x00         ; 216
	db     0x10,0x10,0x38,0x10,0x38,0x10,0x10,0x00         ; 217
	db     0x00,0x00,0x50,0x88,0xA8,0x50,0x00,0x00         ; 218
	db     0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF         ; 219
	db     0x00,0x00,0x00,0x00,0xFF,0xFF,0xFF,0xFF         ; 220
	db     0xF0,0xF0,0xF0,0xF0,0xF0,0xF0,0xF0,0xF0         ; 221
	db     0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F         ; 222
	db     0xFF,0xFF,0xFF,0xFF,0x00,0x00,0x00,0x00         ; 223
	db     0x00,0x00,0x68,0x90,0x90,0x68,0x00,0x00         ; 224
	db     0x60,0x90,0xE0,0x90,0x90,0xE0,0x80,0x00         ; 225
	db     0xF8,0x88,0x80,0x80,0x80,0x80,0x00,0x00         ; 226
	db     0xF8,0x50,0x50,0x50,0x50,0x48,0x80,0x00         ; 227
	db     0xF8,0x48,0x20,0x40,0x88,0xF8,0x00,0x00         ; 228
	db     0x00,0x00,0x78,0x90,0x88,0x70,0x00,0x00         ; 229
	db     0x00,0x00,0x88,0x88,0xC8,0xB0,0x80,0x80         ; 230
	db     0x00,0x00,0x50,0x50,0x20,0x50,0x50,0x20         ; 231
	db     0x70,0x20,0x70,0xA8,0xA8,0x70,0x20,0x70         ; 232
	db     0x70,0x88,0xF8,0x88,0x88,0x70,0x00,0x00         ; 233
	db     0x70,0x88,0x88,0x88,0x50,0xD8,0x00,0x00         ; 234
	db     0x30,0x40,0x30,0x48,0x48,0x30,0x00,0x00         ; 235
	db     0x00,0x00,0x50,0xA8,0xA8,0x50,0x00,0x00         ; 236
	db     0x00,0x10,0x70,0xA8,0xA8,0x70,0x40,0x00         ; 237
	db     0x00,0x70,0x80,0xE0,0x80,0x70,0x00,0x00         ; 238
	db     0x70,0x88,0x88,0x88,0x88,0x88,0x00,0x00         ; 239
	db     0x00,0xF8,0x00,0xF8,0x00,0xF8,0x00,0x00         ; 240
	db     0x00,0x20,0x20,0xF8,0x20,0x20,0xF8,0x00         ; 241
	db     0x00,0xC0,0x30,0x08,0x30,0xC0,0xF8,0x00         ; 242
	db     0x00,0x18,0x60,0x80,0x60,0x18,0xF8,0x00         ; 243
	db     0x00,0x18,0x20,0x20,0x20,0x20,0x20,0x20         ; 244
	db     0x20,0x20,0x20,0x20,0x20,0x20,0xC0,0x00         ; 245
	db     0x00,0x20,0x00,0xF8,0x00,0x20,0x00,0x00         ; 246
	db     0x00,0x68,0xB0,0x00,0x68,0xB0,0x00,0x00         ; 247
	db     0x00,0x30,0x48,0x48,0x30,0x00,0x00,0x00         ; 248
	db     0x00,0x30,0x78,0x78,0x30,0x00,0x00,0x00         ; 249
	db     0x00,0x00,0x00,0x00,0x30,0x00,0x00,0x00         ; 250
	db     0x1C,0x10,0x10,0x90,0x50,0x30,0x10,0x00         ; 251
	db     0xE0,0x90,0x90,0x00,0x00,0x00,0x00,0x00         ; 252
	db     0x60,0x10,0x60,0xF0,0x00,0x00,0x00,0x00         ; 253
	db     0x00,0x70,0x70,0x70,0x70,0x70,0x70,0x00         ; 254
	db     0xAA,0x55,0xAA,0x55,0xAA,0x55,0xAA,0x55         ; 255

; ---------------------------------------------
;     Interrupt Vector starts at 0xA000
; ---------------------------------------------

	ds    0xA000-$

	dw    nullirq
	dw    nullirq
	dw    kbirq
	dw    vbirq
	dw    nullirq
	dw    nullirq
	dw    nullirq
	dw    nullirq
