;
; Choplifter Copyright Br√∏derbund 1982, 1985
;   NABU Conversion by Brian Johnson 2024
;

VDP_LATCH:    equ 0xa1
VDP_DATA:     equ 0xa0

PSG_LATCH:    equ 0x41
PSG_WRITE:    equ 0x40
PSG_READ:     equ 0x40

MSX_INIT:     equ 0x4002

CPM:          equ 0

if CPM
org 0x0100
else
org 0x140d
endif
	nop
	nop
	nop
	jp     entry

; ---------------------------------------------
;     Interrupt Vector starts at 0x1500 (or 0x200)
; ---------------------------------------------

if CPM
	ds    0x0200-$
else
	ds    0x1500-$
endif

	dw    nullirq
	dw    nullirq
	dw    keyboard_irq
	dw    vblank_irq
	dw    nullirq
	dw    nullirq
	dw    nullirq
	dw    nullirq

; ---------------------------------------------
;     MSX Wrapper Entry Point
; ---------------------------------------------

entry:
	di
	ld     sp, 0xE000          ; Set temporary stack to high 8k of RAM
	ld     a, 0x03
	out    (0x00), a           ; Disable ROM

	ld     hl, msxcode_end     ; Copy ROM code to 0x4000-0xbfff
	ld     de, 0xBFFF
	ld     bc, msxlength
	lddr

	call   splash              ; Display splash screen
	call   patch               ; Patch ROM I/O accesses

if CPM
	ld     a, 0x02             ; Interrupt vector at address 0x0200
else
	ld     a, 0x15             ; Interrupt vector at address 0x1500
endif
	ld     i, a
	im     2                   ; Interrupt Mode 2

	ld     a, 0x07             ; I/O Port configuration register
	out    (0x41), a
	ld     a, 0x7F             ; Port A write, Port B read
	out    (0x40), a
	ld     a, 0x0E             ; I/O Port A register
	out    (0x41), a
	ld     a, 0x30             ; Enable VBlank and keyboard interrupt
	out    (0x40), a

	ld     hl, (MSX_INIT)
	jp     (hl)                ; Jump to MSX ROM entry point

; ---------------------------------------------
;     ROM Patcher
; ---------------------------------------------
patch:
	ld     ix, patch_table     ; Address of patch table
apply_patch:
	ld     l, (ix+0)
	ld     h, (ix+1)           ; Load first word in table (address to patch)
	ld     a, h
	or     l
	jr     z, patch_done       ; If address == 0 we are done
	inc    ix
	inc    ix                  ; Increment pointer to length byte for entry
	ld     b, (ix+0)           ; B = number of bytes to patch
patch_byte:
	inc    ix                  ; IX = address of first patch byte in current entry
	ld     a, (ix+0)           ; A = new value
	ld     (hl), a             ; Update ROM with new byte value
	inc    hl                  ; Increment patch address
	djnz   patch_byte          ; Decrement B if not zero patch next byte in entry
	inc    ix                  ; Move to next entry in patch table
	jr     apply_patch         ; Apply next patch to ROM
patch_done:
	ret

; ---------------------------------------------
;     Table of patches to apply to ROM
;        Entry format
;         0  - Address to patch
;         2  - Number of bytes
;         3+ - List of bytes
;     The last entry will have an address of 0
; ---------------------------------------------

patch_table:
; ---------------------------------------------
; Use Interrupt Mode 2
; ---------------------------------------------
	dw 0x4009
	db 1, 0x5e

; ---------------------------------------------
; Address of MSX font
; ---------------------------------------------
	dw 0x0004
	db 2
	dw msx_font

; ---------------------------------------------
; VDP.DR = VDP_DATA
; ---------------------------------------------
	dw 0x0006
	db 1, VDP_DATA

; ---------------------------------------------
; VDP.DW = VDP_DATA
; ---------------------------------------------
	dw 0x0007
	db 1, VDP_DATA

; ---------------------------------------------
; Initialize KEYI hook to just rdvdp bios call
; ---------------------------------------------
	dw 0xfd9a
	db 3, 0xc3
	dw rdvdp

; ---------------------------------------------
; Implement single button joystick control scheme
; ---------------------------------------------
	dw 0x41d9
	db 4, 0xcd
	dw patch_control_scheme
	db 0x00

; ---------------------------------------------
; Patch check for infinite lives
; ---------------------------------------------
	dw 0x4657
	db 3, 0xc3
	dw infinite_lives_cheat

; ---------------------------------------------
; Patch in required BIOS call replacements
; ---------------------------------------------
	dw 0x0138                  ; RSLREG - Just return
	db 1, 0xc9

	dw 0x013b                  ; WSLREG - Just return
	db 1, 0xc9

	dw 0x0041
	db 3, 0xc3
	dw disscr

	dw 0x0044
	db 3, 0xc3
	dw enascr

	dw 0x0072
	db 3, 0xc3
	dw inigrp

	dw 0x0056
	db 3, 0xc3
	dw filvrm

	dw 0x005c
	db 3, 0xc3
	dw ldirvm

	dw 0x0053
	db 3, 0xc3
	dw setwrt

	dw 0x013e
	db 3, 0xc3
	dw rdvdp

	dw 0x0141
	db 3, 0xc3
	dw snsmat

	dw 0x0047
	db 3, 0xc3
	dw wrtvdp

	dw 0x004d
	db 3, 0xc3
	dw wrtvrm

	dw 0x0093
	db 3, 0xc3
	dw wrtpsg

	dw 0x0096
	db 3, 0xc3
	dw rdpsg

; End of patch table
	dw 0
	db 0

; ---------------------------------------------
; Splash Screen
; ---------------------------------------------
splash:
; Initialize Screen Mode 2
	call   inigrp
; Load MSX Font Patterns
	ld     hl, msx_font
	ld     de, 0x0000
	ld     bc, 0x0800
	call   ldirvm
	ld     hl, msx_font
	ld     de, 0x0800
	ld     bc, 0x0800
	call   ldirvm
	ld     hl, msx_font
	ld     de, 0x1000
	ld     bc, 0x0800
	call   ldirvm
; Color Table - red text on black background
	ld     a, 0x60
	ld     hl, 0x2000
	ld     bc, 0x1800
	call   filvrm
; Display splash screen message
	ld     bc, 0x001b
	ld     de, 0x1982
	ld     hl,splash_msg
	call   ldirvm
; Delay Loop
	xor    a
	ld     b, 0x08
	ld     d, a
	ld     e, a
delay_loop:
	dec    de
	ld     a, d
	or     e
	jr     nz, delay_loop
	djnz   delay_loop
	ret

splash_msg: db "Conversion by Brian Johnson"

; ---------------------------------------------
;     Stub IRQ Handler
; ---------------------------------------------
nullirq:
	reti

; ---------------------------------------------
;     Keyboard Interrupt
; ---------------------------------------------
keyboard_irq:
	push   af
	push   bc
	push   hl
	ld     a, (controller)
	cp     0x80
	jr     z, handle_joystick
	in     a, (0x90)
	cp     0x94
	jr     z, kbirq_exit
	cp     0x20
	jr     z, space_pressed
	cp     0x80
	jr     z, controller_select
	cp     0xE0
	call   nc, special_keys
	jr     kbirq_exit
handle_joystick:
	in     a, (0x90)
	ld     b, a
	and    0x12
	bit    0, b
	jr     nz, joystick.left
	bit    2, b
	jr     nz, joystick.right
	bit    3, b
	jr     nz, joystick.up
	jr     joystick.set
joystick.right:
	set    3, a
	jr     joystick.set
joystick.up:
	set    0, a
	jr     joystick.set
joystick.left:
	set    2, a
joystick.set:
	ld     (joystick_state), a
	xor    a
	ld     (controller), a
	jr     kbirq_exit
controller_select:
	ld     (controller), a
	jr     kbirq_exit
space_pressed:
	ld     hl, row8
	set    0, (hl)
	ld     a, 1
	ld     (fire_delay), a     ; Delay counter till FIRE key gets released
kbirq_exit:
	pop    hl
	pop    bc
	pop    af
	ei
	reti

special_keys:
	ld     b, a
	and    0x0f
	ld     hl, row8
	cp     0x00
	jr     nz, left_arrow
	ld     c, 0x7f
left_arrow:
	cp     0x01
	jr     nz, up_arrow
	ld     c, 0xef
up_arrow:
	cp     0x02
	jr     nz, down_arrow
	ld     c, 0xdf
down_arrow:
	cp     0x03
	jr     nz, sym_key
	ld     c, 0xbf
sym_key:
	cp     0x08
	jr     nz, pause_key
	ld     hl, row6
	ld     c, 0xfb
pause_key:
	cp     0x09
	jr     nz, no_key
	ld     hl, row7
	ld     c, 0xef
no_key:
	cp     0x06
	jr     nz, yes_key
	ld     hl, row7
	ld     c, 0xfe
yes_key:
	cp     0x07
	jr     nz, set_bit
	ld     hl, row7
	ld     c, 0xfd
set_bit:
	ld     a, (hl)
	and    c
	ld     (hl), a
	bit    4, b
	ret    nz
	ld     a, c
	cpl
	ld     c, (hl)
	or     c
	ld     (hl), a
	ret

joystick_state:
           db 0                ; Current joystick state
fire_delay:db 0                ; Counter for space key release
controller:
           db 0                ; Which controller are we handling (joystick, keyboard)

; ---------------------------------------------
;     Vertical Blank Interrupt
; ---------------------------------------------
vblank_irq:
	push   hl
	push   de
	push   bc
	push   af
	exx
	ex     af, af'
	push   hl
	push   de
	push   bc
	push   af
	push   iy
	push   ix
	ld     a, (fire_delay)
	cp     0
	jr     z, keyi_hook        ; If fire_delay is 0, skip
	inc    a                   ; Increment fire_delay
	and    0x07                ; fire_delay mod 15
	ld     (fire_delay), a     ; Update fire_delay
	cp     0
	jr     nz, keyi_hook       ; If fire_delay has not wrapped back to 0, skip
	ld     hl, row8
	res    0, (hl)             ; Else reset keyboard fire button state
keyi_hook:
	call   0xfd9a              ; KEYI Hook
	pop    ix
	pop    iy
	pop    af
	pop    bc
	pop    de
	pop    hl
	exx
	ex     af, af'
	pop    af
	pop    bc
	pop    de
	pop    hl
	ei
	reti

; Single button control scheme
patch_control_scheme:
	bit    4, (iy+0x59)        ; Checks for FIRE button (0 == pressed)
	ret    nz
	ld     a, (0xe278)         ; Heading (00 = neutral, ff = left, 01 = right)
	cp     0x00
	jr     z, neutral
	cp     0xff
	jr     z, left
	cp     0x01
	jr     z, right
left:
	bit    3, (iy+0x59)        ; Checks RIGHT direction (0 == pressed)
	ret
right:
	bit    2, (iy+0x59)        ; Checks LEFT direction (0 == pressed)
	ret
neutral:
	bit    2, (iy+0x59)
	ret    z
	bit    3, (iy+0x59)
	ret

; Enable infinte lives
infinite_lives_cheat:
	ld     a, 0x07
	call   snsmat
	and    0x03
	cp     0x00                ; Check if both YES and NO are pressed
	ret    nz
	set    6, (iy+0x1f)        ; If they are enable infinite lives
	ret

; ==========================================================
;  Mini CBIOS
; ==========================================================

; ----------------------------------------------------------
; Blanks Screen
;   void DISSCR(void)
; ----------------------------------------------------------
disscr:
	ld     b, 0xa2
	ld     c, 1
	call   wrtvdp
	ret

; ----------------------------------------------------------
; Enables Screen
;   void ENASCR(void)
; ----------------------------------------------------------
enascr:
	ld     b, 0xe2
	ld     c, 1
	call   wrtvdp
	ret

; ----------------------------------------------------------
; Initializes Screen Mode 2
;   void INIGRP(void)
; ----------------------------------------------------------
inigrp:
	call   disscr

	ld     hl, 0x1800
	call   setwrt
	ld     b, 3
	ld     c, 0
	xor    a
	di
inigrp.1:
	out    (VDP_DATA), a
	inc    c
	jr     nz,inigrp.1
	djnz   inigrp.1
	ld     hl, mode2_regs
	ld     bc, 8 * 0x100 + VDP_LATCH
	ld     d, 0x80
inigrp.2:
	outi
	ld     a, b
	out    (c), d
	inc    d
	or     a
	jr     nz, inigrp.2
	ei

	ld     a, 208
	ld     hl, 0x1b00
	call   wrtvrm

	xor    a
	ld     bc, 0x1800
	ld     hl, 0x0000
	ld     l, a
	push   bc
	call   filvrm
	pop    bc
	xor    a
	ld     hl, 0x2000
	call   filvrm

	jp     enascr

mode2_regs:
	db 0x02                    ; R0: M3 = 1 (mode2)
	db 0xa2                    ; R1: 16k, blank, irq, mode2, 16x16, 1X
	db 0x06                    ; R2: name table = 0x1800
	db 0xff                    ; R3: color table = 0x2000
	db 0x03                    ; R4: pattern generator = 0x0000
	db 0x36                    ; R5: sprite attribute table = 0x1b00
	db 0x07                    ; R6: sprite pattern table = 0x3800
	db 0x00                    ; R7: background, forground color = 0

; ----------------------------------------------------------
; Fill VRAM with a set value
;   void FILVRM(uint8_t value, uint16_t address, uint16_t count)
;       value   : A
;       address : HL
;       count   : BC
; ----------------------------------------------------------
filvrm:
	push   af
	call   setwrt
	dec    bc
	inc    c
	ld     a, b
	ld     b, c
	ld     c, a
	inc    c
	pop    af
filvrm.1:
	out    (VDP_DATA), a
	dec    b
	jr     nz, filvrm.1
	dec    c
	jr     nz, filvrm.1
	ret

; ----------------------------------------------------------
; Write Data to VRAM
;   void LDIRVM(uint16_t address, uint16_t vram, uint16_t count)
;       address : HL
;       vram    : DE
;       count   : BC
; ----------------------------------------------------------
ldirvm:
	ex     de, hl
	call   setwrt
	ex     de, hl
	push   bc
	pop    de
	ld     a, e
	or     a
	jp     nz, ldirvm.1
	dec    d
ldirvm.1:
	ld     b, e
	ld     c, VDP_DATA
ldirvm.2:
	outi
	jr     nz, ldirvm.2
	dec    d
	ret    m
	jp     ldirvm.2

; ----------------------------------------------------------
; Set VDP VRAM Write Address
;   void SETWRT(uint16_t address)
;       address : HL
; ----------------------------------------------------------
setwrt:
	di
	ld     a, l
	out    (VDP_LATCH), a
	ld     a, h
	and    0x3f
	or     0x40
	out    (VDP_LATCH), a
	ei
	ret

; ----------------------------------------------------------
; Read VDP Status Register
;   void RDVDP(void)
;       return : A - vdp status
; ----------------------------------------------------------
rdvdp:
	in     a, (VDP_LATCH)
	ret

; ----------------------------------------------------------
; Write Byte to VRAM
;   void WRTVRM(uint16_t address, uint8_t value)
;       address : HL
;       value   : A
; ----------------------------------------------------------
wrtvrm:
	push   af
	call   setwrt
	pop    af
	out    (VDP_DATA), a
	ret

; ----------------------------------------------------------
; Set VDP Registser
;   void WRTVDP(uint8_t register, unit8_t value)
;       register : C
;       value    : B
; ----------------------------------------------------------
wrtvdp:
	di
	ld     a, b
	out    (VDP_LATCH), a
	ld     a, c
	or     0x80
	out    (VDP_LATCH), a
	ei
	ret

; ----------------------------------------------------------
; Set VDP Registser
;   void SNSMAT(uint8_t row)
;       row    : A
;       return : A - keyboard matrix row bitmap
; ----------------------------------------------------------
snsmat:
	push   hl
	push   bc
	cp     0x09
	jr     nc, snsmat.1
	ld     hl, row0
	ld     b, 0x00
	ld     c, a
	add    hl, bc
	ld     a, (hl)
	jr     snsmat.2
snsmat.1:
	xor    a
snsmat.2:
	cpl
	pop    bc
	pop    hl
	ret

; MSX Keyboard Matrix Rows
row0:      db 0
row1:      db 0
row2:      db 0
row3:      db 0
row4:      db 0
row5:      db 0
row6:      db 0
row7:      db 0                ; Stop Key (PAUSE on NABU)
row8:      db 0                ; Arrows and Space

; ----------------------------------------------------------
; Read PSG Register
;   uint8_t RDPSG(uint8_t register)
;       register : A
;       return   : A - register value
; ----------------------------------------------------------
rdpsg:
	cp     0x0e
	jr     nz, rdpsg.1
	ld     a, (joystick_state)
	cpl
	ret
rdpsg.1:
	out    (PSG_LATCH), a
	in     a, (PSG_READ)
	ret

; ----------------------------------------------------------
; Write PSG Register
;   void WRTPSG(uint8_t register, uint8_t value)
;       register : A
;       value    : E
; ----------------------------------------------------------
wrtpsg:
	cp     0x0f
	ret    z
	di
	out    (PSG_LATCH), a
	push   af
	cp     0x07
	ld     a, e
	jr     nz, wrtpsg.1
	and    0x3f
	or     0x40
wrtpsg.1:
	out    (PSG_WRITE), a
	ei
	pop    af
	ret

; ==========================================================
;  MSX Font Data
; ==========================================================
msx_font:
	db     0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00         ; 0
	db     0x3C,0x42,0xA5,0xA5,0xC3,0xBD,0x42,0x3C         ; 1
	db     0x3C,0x7E,0xDB,0xDB,0xBD,0xC3,0x7E,0x3C         ; 2
	db     0x6C,0xAA,0x92,0x44,0x44,0x28,0x10,0x00         ; 3
	db     0x10,0x28,0x44,0x82,0x44,0x28,0x10,0x00         ; 4
	db     0x10,0x38,0x38,0xD6,0xFE,0xD6,0x38,0x00         ; 5
	db     0x10,0x38,0x7C,0x7C,0xFE,0xD6,0x38,0x00         ; 6
	db     0x00,0x00,0x00,0x18,0x18,0x00,0x00,0x00         ; 7
	db     0xFF,0xFF,0xFF,0xE7,0xE7,0xFF,0xFF,0xFF         ; 8
	db     0x3C,0x42,0x81,0x81,0x81,0x81,0x42,0x3C         ; 9
	db     0xC3,0xBD,0x7E,0x7E,0x7E,0x7E,0xBD,0xC3         ; 10
	db     0x0C,0x04,0x08,0x70,0x88,0x88,0x70,0x00         ; 11
	db     0x00,0x70,0x88,0x88,0x70,0x20,0x70,0x20         ; 12
	db     0x20,0x30,0x28,0x28,0x20,0xE0,0xC0,0x00         ; 13
	db     0x38,0x3C,0x24,0x24,0xE4,0xDC,0x18,0x00         ; 14
	db     0x10,0x44,0x38,0xAA,0x38,0x44,0x10,0x00         ; 15
	db     0x10,0x10,0x10,0x38,0x10,0x10,0x10,0x10         ; 16
	db     0x10,0x10,0x10,0xEF,0x00,0x00,0x00,0x00         ; 17
	db     0x00,0x00,0x00,0xEF,0x10,0x10,0x10,0x10         ; 18
	db     0x10,0x10,0x10,0xE0,0x10,0x10,0x10,0x10         ; 19
	db     0x10,0x10,0x10,0x0F,0x10,0x10,0x10,0x10         ; 20
	db     0x10,0x10,0x10,0xEF,0x10,0x10,0x10,0x10         ; 21
	db     0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10         ; 22
	db     0x00,0x00,0x00,0xFF,0x00,0x00,0x00,0x00         ; 23
	db     0x00,0x00,0x00,0x0F,0x10,0x10,0x10,0x10         ; 24
	db     0x00,0x00,0x00,0xE0,0x10,0x10,0x10,0x10         ; 25
	db     0x10,0x10,0x10,0x0F,0x00,0x00,0x00,0x00         ; 26
	db     0x10,0x10,0x10,0xE0,0x00,0x00,0x00,0x00         ; 27
	db     0x81,0x42,0x24,0x18,0x18,0x24,0x42,0x81         ; 28
	db     0x01,0x02,0x04,0x08,0x10,0x20,0x40,0x80         ; 29
	db     0x80,0x40,0x20,0x10,0x08,0x04,0x02,0x01         ; 30
	db     0x00,0x00,0x10,0xFF,0x10,0x00,0x00,0x00         ; 31
	db     0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00         ; 32
	db     0x20,0x20,0x20,0x20,0x00,0x20,0x00,0x00         ; 33
	db     0x50,0x50,0x00,0x00,0x00,0x00,0x00,0x00         ; 34
	db     0x00,0x50,0xF8,0x50,0xF8,0x50,0x00,0x00         ; 35
	db     0x20,0x70,0xA0,0x70,0x28,0x70,0x20,0x00         ; 36
	db     0x00,0xC8,0xD0,0x20,0x58,0x98,0x00,0x00         ; 37
	db     0x60,0x90,0x60,0xA8,0x98,0x60,0x00,0x00         ; 38
	db     0x40,0x40,0x00,0x00,0x00,0x00,0x00,0x00         ; 39
	db     0x20,0x40,0x40,0x40,0x40,0x20,0x00,0x00         ; 40
	db     0x20,0x10,0x10,0x10,0x10,0x20,0x00,0x00         ; 41
	db     0x00,0x20,0xA8,0x70,0x50,0x88,0x00,0x00         ; 42
	db     0x00,0x20,0x20,0xF8,0x20,0x20,0x00,0x00         ; 43
	db     0x00,0x00,0x00,0x00,0x00,0x40,0x40,0x00         ; 44
	db     0x00,0x00,0x00,0xF8,0x00,0x00,0x00,0x00         ; 45
	db     0x00,0x00,0x00,0x00,0x00,0x40,0x00,0x00         ; 46
	db     0x00,0x08,0x10,0x20,0x40,0x80,0x00,0x00         ; 47
	db     0x70,0x88,0xA8,0xA8,0x88,0x70,0x00,0x00         ; 48
	db     0x20,0x60,0x20,0x20,0x20,0x70,0x00,0x00         ; 49
	db     0x70,0x88,0x08,0x70,0x80,0xF8,0x00,0x00         ; 50
	db     0xF8,0x08,0x30,0x08,0x88,0x70,0x00,0x00         ; 51
	db     0x10,0x30,0x50,0xF8,0x10,0x10,0x00,0x00         ; 52
	db     0xF8,0x80,0x70,0x08,0x88,0x70,0x00,0x00         ; 53
	db     0x30,0x40,0x70,0x88,0x88,0x70,0x00,0x00         ; 54
	db     0xF8,0x88,0x10,0x20,0x20,0x20,0x00,0x00         ; 55
	db     0x70,0x88,0x70,0x88,0x88,0x70,0x00,0x00         ; 56
	db     0x70,0x88,0x88,0x78,0x08,0x70,0x00,0x00         ; 57
	db     0x00,0x00,0x40,0x00,0x00,0x40,0x00,0x00         ; 58
	db     0x00,0x00,0x40,0x00,0x00,0x40,0x40,0x00         ; 59
	db     0x00,0x18,0x60,0x80,0x60,0x18,0x00,0x00         ; 60
	db     0x00,0x00,0xF8,0x00,0xF8,0x00,0x00,0x00         ; 61
	db     0x00,0xC0,0x30,0x08,0x30,0xC0,0x00,0x00         ; 62
	db     0x70,0x88,0x30,0x20,0x00,0x20,0x00,0x00         ; 63
	db     0x70,0x88,0x98,0xA8,0xA8,0x98,0x40,0x00         ; 64
	db     0x70,0x88,0x88,0xF8,0x88,0x88,0x00,0x00         ; 65
	db     0xE0,0x90,0xE0,0x90,0x88,0xF0,0x00,0x00         ; 66
	db     0x70,0x88,0x80,0x80,0x88,0x70,0x00,0x00         ; 67
	db     0xF0,0x48,0x48,0x48,0x48,0xF0,0x00,0x00         ; 68
	db     0xF8,0x80,0xE0,0x80,0x80,0xF8,0x00,0x00         ; 69
	db     0xF8,0x80,0x80,0xE0,0x80,0x80,0x00,0x00         ; 70
	db     0x70,0x88,0x80,0xB8,0x88,0x70,0x00,0x00         ; 71
	db     0x88,0x88,0xF8,0x88,0x88,0x88,0x00,0x00         ; 72
	db     0x70,0x20,0x20,0x20,0x20,0x70,0x00,0x00         ; 73
	db     0x38,0x08,0x08,0x08,0x88,0x70,0x00,0x00         ; 74
	db     0x88,0x90,0xA0,0xE0,0x90,0x88,0x00,0x00         ; 75
	db     0x80,0x80,0x80,0x80,0x80,0xF8,0x00,0x00         ; 76
	db     0xD8,0xA8,0xA8,0x88,0x88,0x88,0x00,0x00         ; 77
	db     0xC8,0xA8,0xA8,0x98,0x98,0x88,0x00,0x00         ; 78
	db     0x70,0x88,0x88,0x88,0x88,0x70,0x00,0x00         ; 79
	db     0xF0,0x88,0x88,0xF0,0x80,0x80,0x00,0x00         ; 80
	db     0x70,0x88,0x88,0xA8,0x90,0x68,0x00,0x00         ; 81
	db     0xF0,0x88,0x88,0xF0,0xA0,0x98,0x00,0x00         ; 82
	db     0x70,0x80,0x70,0x08,0x08,0xF0,0x00,0x00         ; 83
	db     0xF8,0x20,0x20,0x20,0x20,0x20,0x00,0x00         ; 84
	db     0x88,0x88,0x88,0x88,0x88,0x78,0x00,0x00         ; 85
	db     0x88,0x88,0x88,0x50,0x50,0x20,0x00,0x00         ; 86
	db     0x88,0x88,0xA8,0xA8,0xA8,0xD8,0x00,0x00         ; 87
	db     0x88,0x50,0x20,0x50,0x88,0x88,0x00,0x00         ; 88
	db     0x88,0x88,0x70,0x20,0x20,0x20,0x00,0x00         ; 89
	db     0xF8,0x10,0x20,0x40,0x80,0xF8,0x00,0x00         ; 90
	db     0x70,0x40,0x40,0x40,0x40,0x70,0x00,0x00         ; 91
	db     0x00,0x80,0x40,0x20,0x10,0x08,0x00,0x00         ; 92
	db     0x70,0x10,0x10,0x10,0x10,0x70,0x00,0x00         ; 93
	db     0x40,0xA0,0x00,0x00,0x00,0x00,0x00,0x00         ; 94
	db     0x00,0x00,0x00,0x00,0x00,0x00,0xF8,0x00         ; 95
	db     0x20,0x10,0x00,0x00,0x00,0x00,0x00,0x00         ; 96
	db     0x00,0x00,0x78,0x88,0x98,0x68,0x00,0x00         ; 97
	db     0x80,0x80,0xF0,0x88,0x88,0xF0,0x00,0x00         ; 98
	db     0x00,0x00,0x78,0x80,0x80,0x78,0x00,0x00         ; 99
	db     0x08,0x08,0x78,0x88,0x88,0x78,0x00,0x00         ; 100
	db     0x00,0x00,0x70,0x98,0xE0,0x78,0x00,0x00         ; 101
	db     0x30,0x48,0x40,0x40,0xE0,0x40,0x40,0x40         ; 102
	db     0x00,0x00,0x78,0x88,0x88,0x78,0x08,0x70         ; 103
	db     0x80,0x80,0xF0,0x88,0x88,0x88,0x00,0x00         ; 104
	db     0x20,0x00,0x60,0x20,0x20,0x70,0x00,0x00         ; 105
	db     0x10,0x00,0x30,0x10,0x10,0x10,0x10,0x60         ; 106
	db     0x80,0x80,0x98,0xA0,0xE0,0x98,0x00,0x00         ; 107
	db     0xC0,0x40,0x40,0x40,0x40,0x70,0x00,0x00         ; 108
	db     0x00,0x00,0xF0,0xA8,0xA8,0xA8,0x00,0x00         ; 109
	db     0x00,0x00,0xF0,0x88,0x88,0x88,0x00,0x00         ; 110
	db     0x00,0x00,0x70,0x88,0x88,0x70,0x00,0x00         ; 111
	db     0x00,0x00,0xF0,0x88,0x88,0xF0,0x80,0x80         ; 112
	db     0x00,0x00,0x78,0x88,0x88,0x78,0x08,0x08         ; 113
	db     0x00,0x00,0xB8,0xC0,0x80,0x80,0x00,0x00         ; 114
	db     0x00,0x00,0x78,0xF0,0x08,0xF0,0x00,0x00         ; 115
	db     0x40,0x40,0xF0,0x40,0x48,0x30,0x00,0x00         ; 116
	db     0x00,0x00,0x88,0x88,0x88,0x78,0x00,0x00         ; 117
	db     0x00,0x00,0x88,0x88,0x50,0x20,0x00,0x00         ; 118
	db     0x00,0x00,0x88,0xA8,0xA8,0xD8,0x00,0x00         ; 119
	db     0x00,0x00,0xC8,0x30,0x60,0x98,0x00,0x00         ; 120
	db     0x00,0x00,0x88,0x88,0x88,0x78,0x08,0x70         ; 121
	db     0x00,0x00,0xF8,0x30,0x40,0xF8,0x00,0x00         ; 122
	db     0x10,0x20,0x20,0x40,0x20,0x20,0x10,0x00         ; 123
	db     0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x00         ; 124
	db     0x40,0x20,0x20,0x10,0x20,0x20,0x40,0x00         ; 125
	db     0x50,0xA0,0x00,0x00,0x00,0x00,0x00,0x00         ; 126
	db     0x00,0x20,0x50,0x50,0xF8,0x00,0x00,0x00         ; 127
	db     0x70,0x88,0x80,0x80,0x88,0x70,0x20,0x40         ; 128
	db     0x50,0x00,0x88,0x88,0x88,0x78,0x00,0x00         ; 129
	db     0x08,0x10,0x70,0x98,0xE0,0x78,0x00,0x00         ; 130
	db     0x20,0x50,0x78,0x88,0x98,0x68,0x00,0x00         ; 131
	db     0x50,0x00,0x78,0x88,0x98,0x68,0x00,0x00         ; 132
	db     0x40,0x20,0x78,0x88,0x98,0x68,0x00,0x00         ; 133
	db     0x20,0x00,0x78,0x88,0x98,0x68,0x00,0x00         ; 134
	db     0x00,0x00,0x78,0x80,0x80,0x78,0x20,0x40         ; 135
	db     0x20,0x50,0x70,0x98,0xE0,0x78,0x00,0x00         ; 136
	db     0x50,0x00,0x70,0x98,0xE0,0x78,0x00,0x00         ; 137
	db     0x40,0x20,0x70,0x98,0xE0,0x78,0x00,0x00         ; 138
	db     0x50,0x00,0x60,0x20,0x20,0x70,0x00,0x00         ; 139
	db     0x20,0x50,0x60,0x20,0x20,0x70,0x00,0x00         ; 140
	db     0x40,0x20,0x60,0x20,0x20,0x70,0x00,0x00         ; 141
	db     0x50,0x70,0x88,0x88,0xF8,0x88,0x00,0x00         ; 142
	db     0x20,0x70,0x88,0x88,0xF8,0x88,0x00,0x00         ; 143
	db     0x18,0xF8,0x80,0xE0,0x80,0xF8,0x00,0x00         ; 144
	db     0x00,0x00,0xD0,0x68,0xB0,0xD8,0x00,0x00         ; 145
	db     0x78,0xA0,0xB0,0xE0,0xA0,0xB8,0x00,0x00         ; 146
	db     0x20,0x50,0x70,0x88,0x88,0x70,0x00,0x00         ; 147
	db     0x50,0x00,0x70,0x88,0x88,0x70,0x00,0x00         ; 148
	db     0x40,0x20,0x70,0x88,0x88,0x70,0x00,0x00         ; 149
	db     0x20,0x50,0x88,0x88,0x88,0x78,0x00,0x00         ; 150
	db     0x40,0x20,0x88,0x88,0x88,0x78,0x00,0x00         ; 151
	db     0x50,0x00,0x88,0x88,0x88,0x78,0x08,0x70         ; 152
	db     0x50,0x70,0x88,0x88,0x88,0x70,0x00,0x00         ; 153
	db     0x50,0x88,0x88,0x88,0x88,0x70,0x00,0x00         ; 154
	db     0x20,0x20,0x78,0x80,0x80,0x78,0x20,0x20         ; 155
	db     0x20,0x50,0x40,0xE0,0x40,0x48,0xB0,0x00         ; 156
	db     0x88,0x88,0x50,0xF8,0x20,0x70,0x20,0x00         ; 157
	db     0x80,0xD0,0xB0,0xB0,0xB8,0xD0,0x88,0x80         ; 158
	db     0x38,0x40,0xF0,0x40,0xF0,0x40,0x38,0x00         ; 159
	db     0x08,0x10,0x78,0x88,0x98,0x68,0x00,0x00         ; 160
	db     0x10,0x20,0x60,0x20,0x20,0x70,0x00,0x00         ; 161
	db     0x10,0x20,0x70,0x88,0x88,0x70,0x00,0x00         ; 162
	db     0x10,0x20,0x88,0x88,0x88,0x78,0x00,0x00         ; 163
	db     0x28,0x50,0xF0,0x88,0x88,0x88,0x00,0x00         ; 164
	db     0x28,0xD0,0xA8,0xA8,0x98,0x88,0x00,0x00         ; 165
	db     0x00,0x00,0x78,0x88,0x98,0x68,0x00,0x70         ; 166
	db     0x00,0x00,0x70,0x88,0x88,0x70,0x00,0x70         ; 167
	db     0x20,0x00,0x20,0x60,0x88,0x70,0x00,0x00         ; 168
	db     0x00,0x00,0x00,0xE0,0x80,0x00,0x00,0x00         ; 169
	db     0x00,0x00,0x00,0xE0,0x20,0x00,0x00,0x00         ; 170
	db     0x40,0x48,0x50,0x30,0x48,0x90,0x38,0x00         ; 171
	db     0x40,0x48,0x50,0x28,0x58,0xB8,0x08,0x00         ; 172
	db     0x20,0x00,0x20,0x20,0x20,0x20,0x00,0x00         ; 173
	db     0x00,0x00,0x00,0x48,0x90,0x48,0x00,0x00         ; 174
	db     0x00,0x00,0x00,0x90,0x48,0x90,0x00,0x00         ; 175
	db     0x28,0x50,0x70,0x88,0xF8,0x88,0x00,0x00         ; 176
	db     0x28,0x50,0x78,0x88,0x98,0x68,0x00,0x00         ; 177
	db     0x28,0x50,0x70,0x20,0x20,0x70,0x00,0x00         ; 178
	db     0x28,0x50,0x60,0x20,0x20,0x70,0x00,0x00         ; 179
	db     0x28,0x70,0x88,0x88,0x88,0x70,0x00,0x00         ; 180
	db     0x28,0x50,0x70,0x88,0x88,0x70,0x00,0x00         ; 181
	db     0x28,0x50,0x88,0x88,0x88,0x78,0x00,0x00         ; 182
	db     0x28,0x50,0x00,0x88,0x88,0x78,0x00,0x00         ; 183
	db     0xFC,0x48,0x48,0x48,0x48,0xE8,0x08,0x30         ; 184
	db     0x48,0x00,0xD8,0x48,0x48,0xE8,0x08,0x30         ; 185
	db     0xE0,0x68,0x30,0xE8,0x58,0xB8,0x08,0x00         ; 186
	db     0x50,0x28,0x00,0x00,0x00,0x00,0x00,0x00         ; 187
	db     0x00,0x20,0x50,0x88,0x50,0x20,0x00,0x00         ; 188
	db     0x00,0x48,0x50,0x20,0x68,0xA8,0x00,0x00         ; 189
	db     0x7C,0xA8,0xA8,0xA8,0x68,0x28,0x28,0x44         ; 190
	db     0x70,0x80,0x70,0x88,0x70,0x08,0x88,0x70         ; 191
	db     0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0xFF         ; 192
	db     0xF0,0xF0,0xF0,0xF0,0x0F,0x0F,0x0F,0x0F         ; 193
	db     0x00,0x00,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF         ; 194
	db     0xFF,0xFF,0x00,0x00,0x00,0x00,0x00,0x00         ; 195
	db     0x00,0x00,0x00,0x3C,0x3C,0x00,0x00,0x00         ; 196
	db     0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0x00,0x00         ; 197
	db     0xC0,0xC0,0xC0,0xC0,0xC0,0xC0,0xC0,0xC0         ; 198
	db     0x0F,0x0F,0x0F,0x0F,0xF0,0xF0,0xF0,0xF0         ; 199
	db     0xFC,0xFC,0xFC,0xFC,0xFC,0xFC,0xFC,0xFC         ; 200
	db     0x03,0x03,0x03,0x03,0x03,0x03,0x03,0x03         ; 201
	db     0x3F,0x3F,0x3F,0x3F,0x3F,0x3F,0x3F,0x3F         ; 202
	db     0x11,0x22,0x44,0x88,0x11,0x22,0x44,0x88         ; 203
	db     0x88,0x44,0x22,0x11,0x88,0x44,0x22,0x11         ; 204
	db     0xFE,0x7C,0x38,0x10,0x00,0x00,0x00,0x00         ; 205
	db     0x00,0x00,0x00,0x00,0x10,0x38,0x7C,0xFE         ; 206
	db     0x80,0xC0,0xE0,0xF0,0xE0,0xC0,0x80,0x00         ; 207
	db     0x01,0x03,0x07,0x0F,0x07,0x03,0x01,0x00         ; 208
	db     0xFF,0x7E,0x3C,0x18,0x18,0x3C,0x7E,0xFF         ; 209
	db     0x81,0xC3,0xE7,0xFF,0xFF,0xE7,0xC3,0x81         ; 210
	db     0xF0,0xF0,0xF0,0xF0,0x00,0x00,0x00,0x00         ; 211
	db     0x00,0x00,0x00,0x00,0x0F,0x0F,0x0F,0x0F         ; 212
	db     0x0F,0x0F,0x0F,0x0F,0x00,0x00,0x00,0x00         ; 213
	db     0x00,0x00,0x00,0x00,0xF0,0xF0,0xF0,0xF0         ; 214
	db     0x33,0x33,0xCC,0xCC,0x33,0x33,0xCC,0xCC         ; 215
	db     0x00,0x10,0x28,0x28,0x7C,0x00,0x00,0x00         ; 216
	db     0x10,0x10,0x38,0x10,0x38,0x10,0x10,0x00         ; 217
	db     0x00,0x00,0x50,0x88,0xA8,0x50,0x00,0x00         ; 218
	db     0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF         ; 219
	db     0x00,0x00,0x00,0x00,0xFF,0xFF,0xFF,0xFF         ; 220
	db     0xF0,0xF0,0xF0,0xF0,0xF0,0xF0,0xF0,0xF0         ; 221
	db     0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F,0x0F         ; 222
	db     0xFF,0xFF,0xFF,0xFF,0x00,0x00,0x00,0x00         ; 223
	db     0x00,0x00,0x68,0x90,0x90,0x68,0x00,0x00         ; 224
	db     0x60,0x90,0xE0,0x90,0x90,0xE0,0x80,0x00         ; 225
	db     0xF8,0x88,0x80,0x80,0x80,0x80,0x00,0x00         ; 226
	db     0xF8,0x50,0x50,0x50,0x50,0x48,0x80,0x00         ; 227
	db     0xF8,0x48,0x20,0x40,0x88,0xF8,0x00,0x00         ; 228
	db     0x00,0x00,0x78,0x90,0x88,0x70,0x00,0x00         ; 229
	db     0x00,0x00,0x88,0x88,0xC8,0xB0,0x80,0x80         ; 230
	db     0x00,0x00,0x50,0x50,0x20,0x50,0x50,0x20         ; 231
	db     0x70,0x20,0x70,0xA8,0xA8,0x70,0x20,0x70         ; 232
	db     0x70,0x88,0xF8,0x88,0x88,0x70,0x00,0x00         ; 233
	db     0x70,0x88,0x88,0x88,0x50,0xD8,0x00,0x00         ; 234
	db     0x30,0x40,0x30,0x48,0x48,0x30,0x00,0x00         ; 235
	db     0x00,0x00,0x50,0xA8,0xA8,0x50,0x00,0x00         ; 236
	db     0x00,0x10,0x70,0xA8,0xA8,0x70,0x40,0x00         ; 237
	db     0x00,0x70,0x80,0xE0,0x80,0x70,0x00,0x00         ; 238
	db     0x70,0x88,0x88,0x88,0x88,0x88,0x00,0x00         ; 239
	db     0x00,0xF8,0x00,0xF8,0x00,0xF8,0x00,0x00         ; 240
	db     0x00,0x20,0x20,0xF8,0x20,0x20,0xF8,0x00         ; 241
	db     0x00,0xC0,0x30,0x08,0x30,0xC0,0xF8,0x00         ; 242
	db     0x00,0x18,0x60,0x80,0x60,0x18,0xF8,0x00         ; 243
	db     0x00,0x18,0x20,0x20,0x20,0x20,0x20,0x20         ; 244
	db     0x20,0x20,0x20,0x20,0x20,0x20,0xC0,0x00         ; 245
	db     0x00,0x20,0x00,0xF8,0x00,0x20,0x00,0x00         ; 246
	db     0x00,0x68,0xB0,0x00,0x68,0xB0,0x00,0x00         ; 247
	db     0x00,0x30,0x48,0x48,0x30,0x00,0x00,0x00         ; 248
	db     0x00,0x30,0x78,0x78,0x30,0x00,0x00,0x00         ; 249
	db     0x00,0x00,0x00,0x00,0x30,0x00,0x00,0x00         ; 250
	db     0x1C,0x10,0x10,0x90,0x50,0x30,0x10,0x00         ; 251
	db     0xE0,0x90,0x90,0x00,0x00,0x00,0x00,0x00         ; 252
	db     0x60,0x10,0x60,0xF0,0x00,0x00,0x00,0x00         ; 253
	db     0x00,0x70,0x70,0x70,0x70,0x70,0x70,0x00         ; 254
	db     0xAA,0x55,0xAA,0x55,0xAA,0x55,0xAA,0x55         ; 255

; SHA1: b3ca70c8c8120f8261bb865baf5f57b6506ca02e
msxcode:   incbin "choplifter.rom"
msxcode_end: equ $-1
msxlength: equ $-msxcode
