; Modified C-BIOS routines
;
; Copyright (c) 2024 Brian Johnson. All rights reserved.
; Copyright (c) 2002-2005 BouKiCHi.  All rights reserved.
; Copyright (c) 2003 Reikan.  All rights reserved.
; Copyright (c) 2004-2006 Maarten ter Huurne.  All rights reserved.
; Copyright (c) 2004-2009 Albert Beevendorp.  All rights reserved.
; Copyright (c) 2004 Manuel Bilderbeek.  All rights reserved.
; Copyright (c) 2004-2005 Joost Yervante Damad.  All rights reserved.
; Copyright (c) 2004-2005 Jussi Pitk√§nen.  All rights reserved.
; Copyright (c) 2006-2007 Eric Boon.  All rights reserved.
;
; Redistribution and use in source and binary forms, with or without
; modification, are permitted provided that the following conditions
; are met:
; 1. Redistributions of source code must retain the above copyright
;    notice, this list of conditions and the following disclaimer.
; 2. Redistributions in binary form must reproduce the above copyright
;    notice, this list of conditions and the following disclaimer in the
;    documentation and/or other materials provided with the distribution.
;
; THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
; IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
; OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
; IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
; NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
; DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
; THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
; (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

.include "constants.inc"

.section .text.cbios, "acrx"
.extern joystick_state
; ==========================================================
;  Mini CBIOS
; ==========================================================

; ----------------------------------------------------------
; Compares two 16 bit numbers
;   void DCOMPR(uint16_t val1, uint16_t val2)
;       val1 : HL
;       val2 : DE
;       return : Z if equal, C val1 < val2
; ----------------------------------------------------------
.global dcompr
dcompr:
	ld     a, h
	cp     d
	ret    nz
	ld     a, l
	cp     e
	ret

; ----------------------------------------------------------
; Blanks Screen
;   void DISSCR(void)
; ----------------------------------------------------------
.global disscr
disscr:
	ld     a, (RG1SAV)
	and    0xbf
	ld     b, a
	ld     c, 1
	call   wrtvdp
	ret

; ----------------------------------------------------------
; Enables Screen
;   void ENASCR(void)
; ----------------------------------------------------------
.global enascr
enascr:
	ld     a, (RG1SAV)
	or     0x40
	ld     b, a
	ld     c, 1
	call   wrtvdp
	ret

; ----------------------------------------------------------
; Change Screen Mode
;   void CHGMOD(uint8_t mode)
;       mode : A
; ----------------------------------------------------------
.global chgmod
chgmod:
	cp     4
	ret    nc
	ld     hl, chgmod_tbl
	ld     c, a
	ld     b, 0
	add    hl, bc
	add    hl, bc
	ld     c, (hl)
	inc    hl
	ld     h, (hl)
	ld     l, c
	jp     (hl)

chgmod_finish:
                ; Write new values from system RAM to the VDP.
	di
                ; Write R#0 - R#7.
	ld     hl, RG0SAV
	ld     bc, 8 * 0x100 + VDP_LATCH
	ld     d, 0x80
chgmod_finish_lp$:
	outi
	ld     a, b
	out    (c), d
	inc    d
	or     a
	jr     nz, chgmod_finish_lp$
	ei
	jp     enascr

; ----------------------------------------------------------
; Initializes Screen Mode 2
;   void INIGRP(void)
; ----------------------------------------------------------
.global inigrp
inigrp:
	call   disscr

	ld     a, 2
	ld     (SCRMOD), a
	call   chgclr

	ld     hl, (GRPNAM)
	ld     (NAMBAS), hl
	call   setwrt
	ld     b, 3
	ld     c, 0
	xor    a
	di
inigrp_lp$:
	out    (VDP_DATA), a
	inc    c
	jr     nz, inigrp_lp$
	djnz   inigrp_lp$
	ei

	ld     hl, (GRPCGP)
	ld     (CGPBAS), hl
	ld     hl, (GRPATR)
	ld     (ATRBAS), hl
	ld     hl, (GRPPAT)
	ld     (PATBAS), hl

	call    setgrp
	call    clrspr_attr
	call    cls_screen2
	jp      chgmod_finish

; ----------------------------------------------------------
; Initializes Screen Mode 3
;   void INIMLT(void)
; ----------------------------------------------------------
.global inimlt
inimlt:
	call   disscr

	ld     a, 3
	ld     (SCRMOD), a
	call   chgclr

	ld     hl, (MLTNAM)
	ld     (NAMBAS), hl
	call   setwrt
	xor    a
	ld     c, 6
	di
inimlt_loop1$:
	push   af
	ld     e, 4
inimlt_loop2$:
	push   af
	ld     b, 32
inimlt_loop3$:
	out    (VDP_DATA), a
	inc    a
	djnz   inimlt_loop3$
	pop    af
	dec    e
	jr     nz, inimlt_loop2$
	pop    af
	add    a, 32
	dec    c
	jr     nz, inimlt_loop1$
	ei

	ld     hl, (MLTCGP)
	ld     (CGPBAS), hl
	ld     hl, (MLTATR)
	ld     (ATRBAS), hl
	ld     hl, (MLTPAT)
	ld     (PATBAS), hl

	call   setmlt
	call   clrspr_attr
	call   cls_screen3
	jp     chgmod_finish

; ----------------------------------------------------------
; Setup Screen Mode 2
;   void SETGRP(void)
; ----------------------------------------------------------
.global setgrp
setgrp:
	ld     a, (RG0SAV)
	and    0xf1             ; MASK 11110001
	or     0x02             ; M3 = 1
	ld     b, a
	ld     c, 0
	call   wrtvdp          ; write VDP R#0

	ld     a, (RG1SAV)
	and    0xe7            ; MASK 11100111
	ld     b, a
	inc    c
	call   wrtvdp          ; write VDP R#1

	; Set the base address registers. This works because GRPNAM,
	; GRPCOL, GRPCGP, GRPATR and GRPPAT are in same order as the
	; VDP base address registers.
	ld     de, GRPNAM
	ld     c, 2
	xor    a
	call   set_base_address
	ld     a, 0x7f
	call   set_base_address
	ld     a, 0x03
	call   set_base_address
	xor    a
	call   set_base_address
	xor    a
	call   set_base_address
	ret

; ----------------------------------------------------------
; Setup Screen Mode 3
;   void SETMLT(void)
; ----------------------------------------------------------
.global setmlt
setmlt:
	ld     a, (RG0SAV)
	and    0xf1
	ld     b, a
	ld     c, 0
	call   wrtvdp

	ld     a, (RG1SAV)
	and    0xe7
	or     0x08             ; M2 = 1
	ld     b, a
	inc    c
	call   wrtvdp

	; Set the base address registers. This works because MLTNAM,
	; MLTCOL, MLTCGP, MLTATR and MLTPAT are in same order as the
	; VDP base address registers.
	ld     de, MLTNAM
	ld     c, 2

	xor    a
	call   set_base_address
	xor    a
	call   set_base_address; TODO: Should we ignore MLTCOL?
	xor    a
	call   set_base_address
	xor    a
	call   set_base_address
	xor    a
	call   set_base_address
	ret

; ----------------------------------------------------------
; Changes Screen Colors
;   void CHGCLR(void)
; ----------------------------------------------------------
.global chgclr
chgclr:
	ld     a, (SCRMOD)
	dec    a
	push   af
	ld     a, (FORCLR)
	rlca
	rlca
	rlca
	rlca
	and    0xf0
	ld     l, a
	ld     a, (BDRCLR)
	or     l

	ld     b, a
	ld     c, 7
	call   wrtvdp
	pop    af
	ret    nz

	; SCREEN1
	ld     a, (FORCLR)
	rlca
	rlca
	rlca
	rlca
	and    0xf0
	ld     hl, BAKCLR
	or     (hl)
	ld     hl, (T32COL)
	ld     bc, 0x0020
	push   af
	call   setwrt
cclr_lp:
	pop    af
	out    (VDP_DATA), a
	push   af
	dec    bc
	ld     a, b
	or     c
	jr     nz, cclr_lp
	pop    af
	ret


; ----------------------------------------------------------
; Fill VRAM with a set value
;   void FILVRM(uint8_t value, uint16_t address, uint16_t count)
;       value   : A
;       address : HL
;       count   : BC
; ----------------------------------------------------------
.global filvrm
filvrm:
	push   af
	call   setwrt
	dec    bc
	inc    c
	ld     a, b
	ld     b, c
	ld     c, a
	inc    c
	pop    af
filvrm.1:
	out    (VDP_DATA), a
	dec    b
	jr     nz, filvrm.1
	dec    c
	jr     nz, filvrm.1
	ret

; ----------------------------------------------------------
; Write Data to VRAM
;   void LDIRVM(uint16_t address, uint16_t vram, uint16_t count)
;       address : HL
;       vram    : DE
;       count   : BC
; ----------------------------------------------------------
.global ldirvm
ldirvm:
	ex     de, hl
	call   setwrt
	ex     de, hl
	push   bc
	pop    de
	ld     a, e
	or     a
	jp     nz, ldirvm.1
	dec    d
ldirvm.1:
	ld     b, e
	ld     c, VDP_DATA
ldirvm.2:
	outi
	jr     nz, ldirvm.2
	dec    d
	ret    m
	jp     ldirvm.2

; ----------------------------------------------------------
; Set VDP VRAM Write Address
;   void SETWRT(uint16_t address)
;       address : HL
; ----------------------------------------------------------
.global setwrt
setwrt:
	di
	ld     a, l
	out    (VDP_LATCH), a
	ld     a, h
	and    0x3f
	or     0x40
	out    (VDP_LATCH), a
	ei
	ret

; ----------------------------------------------------------
; Set VDP VRAM Read Address
;   void SETRD(uint16_t address)
;       address : HL
; ----------------------------------------------------------
.global setrd
setrd:
	di
	ld     a, l
	out    (VDP_LATCH), a
	ld     a, h
	and    0x3f
	out    (VDP_LATCH), a
	ei
	ret

; ----------------------------------------------------------
; Read VDP Status Register
;   void RDVDP(void)
;       return : A - vdp status
; ----------------------------------------------------------
.global rdvdp
rdvdp:
	in     a, (VDP_LATCH)
	ret

; ----------------------------------------------------------
; Write Byte to VRAM
;   void WRTVRM(uint16_t address, uint8_t value)
;       address : HL
;       value   : A
; ----------------------------------------------------------
.global wrtvrm
wrtvrm:
	push   af
	call   setwrt
	pop    af
	out    (VDP_DATA), a
	ret

; ----------------------------------------------------------
; Read Byte from VRAM
;   uint8_t RDVRM(uint16_t address)
;       address : HL
;       return  : A
; ----------------------------------------------------------
.global rdvrm
rdvrm:
	call    setrd
	; wait (at least) 29 t-states between VRAM accesses
	or      0
	in      a, (VDP_DATA)
	ret

; ----------------------------------------------------------
; Set VDP Registser
;   void WRTVDP(uint8_t register, unit8_t value)
;       register : C
;       value    : B
; ----------------------------------------------------------
.global wrtvdp
wrtvdp:
	di
	ld     a, b
	out    (VDP_LATCH), a
	ld     a, c
	or     0x80
	out    (VDP_LATCH), a
	ei
	push   hl
	ld     hl, RG0SAV
	ld     a, b
	ld     b, 0
	add    hl, bc
	ld     (hl), a
	pop    hl
	ret

; ----------------------------------------------------------
; Get Sprite Size
;   uint8_t GSPSIZ(void)
;        return : A - Size of sprite (8 or 32)
; ----------------------------------------------------------
.global gspsiz
gspsiz:
	ld     a, (RG1SAV)
	rrca
	rrca
	ld     a, 8
	ret    nc
	ld     a, 32
	ret

; ----------------------------------------------------------
; Read Keyboard Matrix Row
;   void SNSMAT(uint8_t row)
;       row    : A
;       return : A - keyboard matrix row bitmap
; ----------------------------------------------------------
.global snsmat
snsmat:
	push   hl
	push   bc
	cp     0x09
	jr     nc, snsmat.1
	ld     hl, row0
	ld     b, 0x00
	ld     c, a
	add    hl, bc
	ld     a, (hl)
	jr     snsmat.2
snsmat.1:
	xor    a
snsmat.2:
	cpl
	pop    bc
	pop    hl
	ret

; ----------------------------------------------------------
; Get Joystick direction
;   unit8_t gtstck(uint8_t controller_id)
;       controller_id : A (0 = key, 1 = joy1, 2 = joy2)
;       return        : A - direction of joystick
; ----------------------------------------------------------
.global gtstck
gtstck:
	push   bc
	push   hl
	cp     0x00
	jr     nz, joy_stck
	ld     a, (row8)
	rrca
	rrca
	rrca
	rrca
	and    0x0f
	ld     hl, joypos_kbd_tbl
	ld     b, 0
	ld     c, a
	add    hl, bc
	ld     a, (hl)
	pop    hl
	pop    bc
	and    a
	ret
joy_stck:
	dec    a
	jr     z, sel_stc1
	ld     a, (joystick_state + 1)
	jr     joy_end
sel_stc1:
	ld     a, (joystick_state)
joy_end:
	and    0x0f
	ld     hl, joypos_joy_tbl
	ld     b, 0
	ld     c, a
	add    hl, bc
	ld     a, (hl)
	pop    hl
	pop    bc
	and    a
	ret

; ----------------------------------------------------------
; Get Joystick trigger state
;   unit8_t gttrig(uint8_t trig_id)
;       trig_id : A (0 = space, 1/3 = joy1 A/B, 2/4 = joy2 A/B)
;       return  : A - 00 = not pressed, FF = pressed
; ----------------------------------------------------------
.global gttrig
gttrig:
	cp     5
	jr     nc, gttrig_space              ; if value of A is above 5, go space routine
	or     a
	jr     nz, joy_trig
; Keyboard (spacebar)
gttrig_space:
	ld     a, (row8)
	cpl
	or     0xfe                          ; FE -> pressed, FF -> not pressed
	inc    a                             ; FF -> pressed, 00 -> not pressed
	ret
joy_trig:
	push   hl
	bit    0, a
	jr     z, sel_trig2
	ld     hl, joystick_state
	jr     check_trig
sel_trig2:
	ld     hl, joystick_state + 1
check_trig:
	and    0x02
	ld     a, (hl)
	jr     nz, trig_notpressed
	bit    4, a
	jr     z, trig_notpressed
	ld     a, 0xff
	pop    hl
	ret
trig_notpressed:
	pop    hl
	xor    a
	ret

; ----------------------------------------------------------
; Read PSG Register
;   uint8_t RDPSG(uint8_t register)
;       register : A
;       return   : A - register value
; ----------------------------------------------------------
.global rdpsg
rdpsg:
	cp     0x0e
	jr     nz, rdpsg.1
	push   de
	push   hl
	ld     hl, joystick_state
	ld     d, 0
	ld     a, (psg15)
	rlca
	rlca
	and    0x01
	ld     e, a
	add    hl, de
	ld     a, (hl)
	cpl
	pop    hl
	pop    de
	ret
rdpsg.1:
	out    (PSG_LATCH), a
	in     a, (PSG_READ)
	ret

; ----------------------------------------------------------
; Write PSG Register
;   void WRTPSG(uint8_t register, uint8_t value)
;       register : A
;       value    : E
; ----------------------------------------------------------
.global wrtpsg
wrtpsg:
	cp     0x0f
	jr     nz, wrtpsg.1
	ld     a, e
	ld     (psg15), a
	ret
wrtpsg.1:
	di
	out    (PSG_LATCH), a
	push   af
	cp     0x07
	ld     a, e
	jr     nz, wrtpsg.2
	and    0x3f
	or     0x40
wrtpsg.2:
	out    (PSG_WRITE), a
	ei
	pop    af
	ret

; ----------------------------------------------------------
; Check Keyboard Buffer Status
;   void CHSNS(void)
;       Zero Flag set if empty
; ----------------------------------------------------------
.global chsns
chsns:
	ei
	push   hl
	push   de
	ld     hl, (GETPNT)
	ld     de, (PUTPNT)
	rst    0x20
	ld     a, 0xff
	jr     nz, chsns_inbuf
	xor    a
chsns_inbuf:
	pop    de
	pop    hl
	ret

; ----------------------------------------------------------
; Get Next Character from Keyboard Buffer
;   uint8_t CHGET(void)
;       return    : A - ASCII value
; ----------------------------------------------------------
.global chget
chget:
	push   hl
	push   de
chget_wait:
	ld     hl, (GETPNT)
	ld     de, (PUTPNT)
	rst    0x20
	jr     nz, chget_char
	ei
	halt
	jr     chget_wait
chget_char:
	ld     a, (hl)
	push   af
	inc    hl
	ld     a, l
	cp     0xff & (KEYBUF + 40)
	jr     nz, chget_nowrap
	ld     hl, KEYBUF
chget_nowrap:
	ld     (GETPNT), hl
	pop    af
	pop    de
	pop    hl
	ret

; ----------------------------------------------------------
; Internal CBIOS Functions
; ----------------------------------------------------------
null_jp:
	ret

clrspr_attr:
	ld     e, 209           ; Y coordinate
	ld     hl, (ATRBAS)
	call   setwrt
	ld     a, (FORCLR)
	ld     d, a
	ld     bc, 0x2000       ; B = 32 = counter, C = pattern index
	di
clrspr_attr_lp$:
	ld     a, e
	out    (VDP_DATA), a    ; Y coordinate
	ld     a, 0
	nop                     ; wait (at least) 29 t-states between VRAM accesses
	nop                     ; only 2 nops, as ld a,0 is slow
	out    (VDP_DATA), a    ; X coordinate
	ld     a, c
	nop                     ; wait (at least) 29 t-states between VRAM accesses
	nop
	nop
	out    (VDP_DATA), a    ; pattern number
	inc    c
	call   gspsiz
	jr     nc, clrspr_attr_8$
	inc    c
	inc    c
	inc    c
clrspr_attr_8$:
	ld     a, d
	out    (VDP_DATA), a    ; color
	djnz   clrspr_attr_lp$
	ei
	ret

cls_screen2:
	xor    a
	ld     bc, 0x1800
	ld     hl, (CGPBAS)
	ld     l, a
	push   bc
	call   filvrm
	pop    bc
	ld     a, (BAKCLR)
	ld     hl, (GRPCOL)
	jp     filvrm

cls_screen3:
	ld     a, (BAKCLR)
	and    0x0F
	ld     b, a
	rlca
	rlca
	rlca
	rlca
	or     b
	ld     bc, 0x800
	ld     hl, (CGPBAS)
	jp     filvrm

set_base_address:
	push   de
	push   af
	; Get the shift value.
	ld     hl, set_base_address_table
	ld     b, 0
	add    hl, bc
	ld     b, (hl)
	; Get the address from (HL) to HL.
	ex     de, hl
	ld     a, (hl)
	inc    hl
	ld     h, (hl)
	ld     l, a
	; Shift it to left in register A. After this A contains the
	; converted address.
set_base_address_loop$:
	add    hl, hl
	adc    a, a
	djnz   set_base_address_loop$
	ld     b, a
	; Set the base address register.
	pop    af
	or     b
	ld     b, a
	call   wrtvdp
	; Increase pointer and register number.
	pop    de
	inc    de
	inc    de
	inc    c
	ret

.section .rodata.cbios, "adr"
chgmod_tbl:
	.word   null_jp         ; SCREEN0
	.word   null_jp         ; SCREEN1
	.word   inigrp          ; SCREEN2
	.word   inimlt          ; SCREEN3
set_base_address_table:
	.byte 0x00,0x00,0x06,0x0A,0x05,0x09,0x05
joypos_joy_tbl:
	;          0    1    2    3    4    5    6    7
	.byte      0x00,0x01,0x05,0x00,0x07,0x08,0x06,0x07
	;          8    9    A    B    C    D    E    F
	.byte      0x03,0x02,0x04,0x03,0x00,0x01,0x05,0x00
joypos_kbd_tbl:
	;          0    1    2    3    4    5    6    7
	.byte      0x00,0x07,0x01,0x08,0x05,0x06,0x00,0x07
	;          8    9    A    B    C    D    E    F
	.byte      0x03,0x00,0x02,0x01,0x04,0x05,0x03,0x00

.section .data.cbios, "adrw"
; PSG Register 15
psg15:     .byte 0
; MSX Keyboard Matrix Rows
.global row0, row1, row2, row3, row4, row5, row6, row7, row8
row0:      .byte 0
row1:      .byte 0
row2:      .byte 0
row3:      .byte 0
row4:      .byte 0
row5:      .byte 0
row6:      .byte 0
row7:      .byte 0  ; Stop Key (PAUSE on NABU)
row8:      .byte 0  ; Arrows and Space

